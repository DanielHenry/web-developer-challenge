{"status":"ok","feed":{"url":"https:\/\/medium.com\/feed\/wwwid","title":"WWWID - Medium","link":"https:\/\/medium.com\/wwwid?source=rss----c432d91819e0---4","author":"","description":"Tren dan update pengembangan web - Medium","image":"https:\/\/cdn-images-1.medium.com\/proxy\/1*TGH72Nnw24QL3iV9IOm4VA.png"},"items":[{"title":"Testing untuk Frontend Web Developer\/UI Engineer","pubDate":"2018-02-16 00:28:22","link":"https:\/\/medium.com\/wwwid\/testing-untuk-frontend-web-developer-ui-engineer-c1e27e7e2742?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/c1e27e7e2742","author":"Fariz Rizaldy","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*9QQWzkq42oT_kJ7S.","description":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*9QQWzkq42oT_kJ7S.\"><figcaption>\u201cLong colorful lines of code on a computer screen\u201d by <a href=\"https:\/\/unsplash.com\/@markusspiske?utm_source=medium&amp;utm_medium=referral\">Markus Spiske<\/a> on\u00a0<a href=\"https:\/\/unsplash.com\/?utm_source=medium&amp;utm_medium=referral\">Unsplash<\/a><\/figcaption><\/figure><h4>Karena Frontend Developer tidak hanya mengconvert design menjadi\u00a0halaman<\/h4>\n<h3>Latar Belakang<\/h3>\n<p>Sudah 9 bulan lebih saya bekerja menjadi seorang Frontend Developer di sebuah startup yang bergerak di bidang edukasi. Karena produk kami merupakan produk digital\u200a\u2014\u200asalah satu nya berbentuk website\u200a\u2014\u200adan kebetulan saya merupakan penanggung jawab di hasil akhir untuk pengguna langsung di\u00a0website.<\/p>\n<p>Banyak yang saya pelajari dari menjadi seorang Frontend Developer untuk skala enterprise. Salah satu nya adalah tentang penting nya testing. Sebelum nya saya <strong>tidak pernah <\/strong>menulis testing sedikitpun di Frontend, karena memang saya belum menemukan penting nya testing di Frontend. Terlebih saya termasuk orang yang belajar <a href=\"https:\/\/en.wikipedia.org\/wiki\/Just-in-time_teaching\">Just In Time<\/a>, mempelajari nya ketika memang\u00a0butuh.<\/p>\n<p>Dan karena dulu belum butuh-butuh banget sama testing, jadi belum dipelajari. Dan setelah \u2018tau\u2019 penting nya menulis test, baru saya pelajari perlahan.<\/p>\n<h3>Kenapa menulis\u00a0test?<\/h3>\n<p>Sebagai seorang Frontend Developer yang bekerja langsung dengan tampilan akhir, terkadang kita merasa <em>ngapain sih nulis testing segala, kan kita test nya bisa langsung di real\u00a0browser?<\/em><\/p>\n<p>Itu enggak salah, setidaknya untuk saat ini. Apakah kalian pernah merasakan dikirim pesan di Telegram\/Slack oleh seorang QA Tester atau siapapun tentang bug yang ada pada UI kita? Sebagai seorang Frontend Developer di era sekarang, kita tidak hanya mengubah desain menjadi suatu halaman. User Interface merupakan sebuah fungsi pada state di aplikasi\u00a0kita.<\/p>\n<p>Setiap state yang berubah pada aplikasi kita, kita ingin tampilan tersebut merefleksikan perubahan nya. State bila data tidak ada, maka tampilan nya seperti apa; State ketika user sedang menginput di searchbar, maka tampilan nya seperti apa. Dan lain-lain.<\/p>\n<p>Agar semua nya <em>make sure works well, <\/em>tentu kita perlu menulis test agar proses lebih efektif. Tentu testing secara automatis lebih efektif daripada manual,\u00a0kan?<\/p>\n<h3>Testing untuk Frontend Developer\/UI Engineer<\/h3>\n<p>Sama seperti untuk developer apapun. Unit Testing, Integration Testing dan End-to-End Testing. Tapi untuk yang bekerja di Web, dua testing ekslusif: Visual Regression Testing &amp; Snapshot\u00a0Testing.<\/p>\n<p>Kita akan bahas satu-satu.<\/p>\n<h4>Unit Testing<\/h4>\n<p>Unit Testing merupakan proses testing dari hal-hal yang terkecil. Misal kita membuat sebuah component Search Bar dari component Navbar (saya ambil contoh dari KelasKita)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*QwTPHLU24NM7_Hvs9uNPXA.png\"><figcaption>Navbar di KelasKita<\/figcaption><\/figure><p>Unit-unit yang akan kita test dari Search Bar tersebut\u00a0adalah:<\/p>\n<ol>\n<li>Apakah component berhasil di\u00a0mount?<\/li>\n<li>Kita mengetik: \u201cBelajar Android\u201d, apakah state nya sama dengan apa yang kita ketik (Belajar Android)?<\/li>\n<li>Apakah muncul hasil pencarian (dari data dummy), misal: \u201cBelajar Android untuk pemula\u201d, \u201cBelajar Android selama 99 hari\u201d, dan \u201cBelajar Android dengan React\u00a0Native\u201d<\/li>\n<li>Membuat validasi, misal minimal kita input 3 karakter. Apakah fungsi di submit sukses\/gagal apabila kata kunci kurang dari 3 karakter?<\/li>\n<li>Apakah icon search tersebut bisa diklik apabila kata kunci kurang dari 3 karakter?<\/li>\n<\/ol>\n<p>Hal yang perlu diingat adalah jangan menulis test ketika proses development; Bila kamu menggunakan proses Test-driven Development, karena sudah jelas: TDD merupakan proses pengembangan yang di-stir oleh\u00a0test.<\/p>\n<p>Jadi sebelum kamu menulis kode \u2018asli\u2019, kamu harus menulis testing nya terlebih dahulu. Ini yang buat saya bingung waktu\u00a0dulu.<\/p>\n<p>Lanjut. Hasil dari testing hanya satu dari 2 pilihan: Sukses &amp; Gagal. Karena di TDD ini siklus nya seperti\u00a0ini:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/390\/1*YHpXjjK5id5GJO3c8mAtJg.png\"><figcaption>Red -&gt; Green -&gt;\u00a0Refactor<\/figcaption><\/figure><p>Apa maksud dari siklus tersebut?<\/p>\n<ol>\n<li>Tulis test case tersebut (dan pasti\u00a0gagal)<\/li>\n<li>Tulis kode yang membuat test case tersebut\u00a0sukses<\/li>\n<li>Refactor code<\/li>\n<\/ol>\n<p>Misal kita ambil contoh dari test case diatas, <em>Apakah component berhasil di mount? <\/em>Kita gunakan pseudo-code terlebih dahulu untuk saat\u00a0ini:<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ undefined!<\/pre>\n<pre>}())<\/pre>\n<p>Tentu gagal, karena searchBarComponent tidak ada. Mari kita buat test tersebut berhasil.<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>  &lt;input class=\"c-searchbar qa-searchbar\" \/&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Sekarang test tersebut berhasil. Mari kita refactor kode\u00a0nya.<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>  &lt;form&gt;<br>    &lt;input<br>      type=\"text\"<br>      class=\"c-searchbar qa-searchbar\"<br>      placeholder=\"Cari kelas atau keterampilan yang ingin kamu pelajari\"<br>    \/&gt;<br>  &lt;\/form&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Lalu testing lagi, apakah sukses\/gagal? Jika sukses, buat test lain, jika gagal, lakukan perubahan agar test tersebut berhasil.<\/p>\n<blockquote>Yaelaaa Riz, gitu doang mah masih bikin enggak ngerti sama Unit Testing. Contoh lagi,\u00a0dong!<\/blockquote>\n<p>Test case kedua: Kita mengetik: \u201cBelajar Android\u201d, apakah state nya sama dengan apa yang kita ketik (Belajar Android)?<\/p>\n<pre>&lt;!-- html --&gt;<br>&lt;body&gt;<br>  &lt;form&gt;<br>    &lt;input<br>      type=\"text\"<br>      class=\"c-searchbar qa-searchbar\"<br>      placeholder=\"Cari kelas atau keterampilan yang ingin kamu pelajari\"<br>    \/&gt;<br>  &lt;\/form&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  const appState = { searchQuery: '' }<\/pre>\n<pre>  searchBarComponent.value = \"Belajar Android\"<\/pre>\n<pre>  \/\/ Okay this is weird, I'm sorry.<\/pre>\n<pre>  appState.searchQuery = searchBarComponent.value<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent.length &gt; 0) \/\/ pass!<\/pre>\n<pre>  \/\/ Test 2<\/pre>\n<pre>  console.log(searchBarComponent.value === appState.searchQuery) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Okay ini berhasil. Meskipun sangat tidak disarankan (cuma buat contoh aja\u00a0ya).<\/p>\n<h4>Integration Testing<\/h4>\n<p>Setelah kita melakukan proses development berdasarkan dari unit-unit kecil yang dibuat beserta fungsionalitas nya, sekarang kita akan mulai ke integration testing.<\/p>\n<p>Agar tidak pusing tentang perbedaan Integration Testing dengan Unit Testing, Unit Testing adalah mentesting fungsionalitas dari unit-unit tersebut, sedangkan Integration Testing adalah mentesting dengan real data (integrasi)<\/p>\n<p>Masih di Searchbar tadi, anggap semua testing tersebut sudah berhasil. Lalu kita integrasi dengan real\u00a0data.<\/p>\n<ol>\n<li>Ketika user input dan lebih dari 3 karakter, maka request ke: <a href=\"https:\/\/domain.com\/api\/v1\/search\/?q=kataKunci\">https:\/\/domain.com\/api\/v1\/search\/?q=kataKunci<\/a>\n<\/li>\n<li>Apakah request berhasil?<\/li>\n<li>Apakah menampilkan hasil data berdasarkan kata kunci tersebut?<\/li>\n<\/ol>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*EvPXBfeHkFeM4Mq_04_6UA.png\"><figcaption>Dropdown hasil pencarian yang data nya diambil dari system. Mungkin search logic nya menggunakan fuzzy\u00a0search<\/figcaption><\/figure><p>Make it\u00a0fail:<\/p>\n<p>\u274e Not request to endpoint<br>\u274e Only type \u2264 2 characters<\/p>\n<p>Make it\u00a0pass:<\/p>\n<p>\u2705 Request to endpoint<br>\u2705 Input \u2265 3 characters<\/p>\n<p>Make it\u00a0better:<\/p>\n<p>\u2705 Show warning message if user input \u2264 2 characters<\/p>\n<p>Library yang biasa digunakan untuk Unit Testing &amp; Integration Testing: <a href=\"https:\/\/facebook.github.io\/jest\/\">Jest<\/a>, <a href=\"https:\/\/github.com\/avajs\/ava\">Ava<\/a>, <a href=\"https:\/\/chaijs.com\/\">Chai<\/a> dan\u00a0<a href=\"https:\/\/github.com\/substack\/tape\">Tape<\/a>.<\/p>\n<h4>End-to-End Testing<\/h4>\n<p>End-to-End testing merupakan testing yang benar-benar seperti bagaimana user menggunakan aplikasi kita. Ketika Unit Testing &amp; Integration Testing hanya melakukan berdasarkan skenario, end-to-end testing benar-benar berdasarkan interaksi user didunia\u00a0nyata.<\/p>\n<p>Masih mengambil contoh di searchbar.<\/p>\n<p>User klik searchbar, lalu ketik \u201cBe\u201d. Kita buat delay selama 3 detik, karena searchbar harus diisi dengan 3 karakter lebih, maka akan menampilkan error\u00a0message.<\/p>\n<p>Dan kita bisa tau error message nya itu seperti apa tampilan nya. Lalu dilanjutkan dengan mengetik \u201cBelajar Android\u2026\u201d. Lalu muncul hasil pencarian. Lalu user klik salah satu link nya. Case untuk \u201cEnd-to-end testing searchbar pun selesai\u201d.<\/p>\n<p>Bedanya dengan tes langsung di browser adalah: Automatisasi. Ya, kita enggak usah capek-capek ngelakuin all possible action secara\u00a0manual.<\/p>\n<p>Library yang biasa digunakan untuk E2E Testing: <a href=\"http:\/\/www.seleniumhq.org\/\">Selenium<\/a>, <a href=\"http:\/\/www.protractortest.org\/\">Protractor<\/a>, dan <a href=\"https:\/\/www.cypress.io\/\">Cypress<\/a> (Very looks promising!)<\/p>\n<h4>Snapshot Testing<\/h4>\n<p>Snapshot testing mungkin hanya berlaku di yang component-based, seperti React, Vue, dll. Snapshot Testing berguna untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/p>\n<p>Jadi pertama kita lakukan snapshot testing, dan ketika sukses akan menyimpan snapshot tersebut. Snapshot berbeda dengan screenshot, karena disini tidak menyimpan\/membandingkan piksel sedikitpun.<\/p>\n<p>Workflownya: Kamu bikin component, lalu buat snapshot testing. Bila belum memiliki snapshot sebelumnya yang disimpan, maka dibuat. Dan test pasti pass. Jika snapshot sebelumnya ternyata sudah ada, maka bandingkan. Jika beda, maka test\u00a0fail.<\/p>\n<p>Saya belum menemukan \u2018manfaat\u2019 dari snapshot testing ini, jadi belum tertarik untuk mempelajari nya lebih\u00a0lanjut.<\/p>\n<p>Berdasarkan dari dokumentasi nya tentang manfaat Snapshot\u00a0Testing:<\/p>\n<blockquote>Snapshot Testing berguna untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/blockquote>\n<p>Terlihat sangat bermanfaat. Siapa sih yang enggak mau UI nya berubah dan ternyata perubahan nya tidak sesuai dengan espektasi kita? Jika menurut saya, snapshot testing ini bisa di case seperti\u00a0ini:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*vktmI8QLgyZ9lsZGWuxnGA.png\"><figcaption>Related category by topic di KelasKita<\/figcaption><\/figure><p>Related by Topic di KelasKita selalu berubah data nya (secara random) setiap top-level component dibuat (created, yeah we use Vue!). Lalu saya buat snapshot\u00a0nya.<\/p>\n<p>Lalu saya membuat perubahan. Misalnya data di random setiap ada perubahan di component. Ketika saya melakukan snapshot testing, pasti gagal. Karena beda dengan snapshot sebelumnya.<\/p>\n<p>Jika ternyata perubahan tersebut sesuai espektasi kita, maka update snapshot. Jika tidak, maka kita perbaiki apa yang membuat UI tersebut\u00a0berbeda.<\/p>\n<p>Library yang biasa digunakan untuk Snapshot Testing:\u00a0<a href=\"https:\/\/facebook.github.io\/jest\/\">Jest<\/a><\/p>\n<h4>Visual Regression Testing<\/h4>\n<p>Ketika snapshot testing membandingkan snapshot (berbentuk text) yang dihasilkan dari hasil render, visual regression testing membandingkan berdasarkan screenshot (pixel).<\/p>\n<p>Contoh Visual Regression Testing:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/899\/1*uVyNvsaS6fxcSchrkasyKQ.png\"><figcaption>Contoh Visual Regression Testing diambil dari: <a href=\"https:\/\/www.thecrumb.com\/2016\/05\/01\/wraith\/\">https:\/\/www.thecrumb.com\/2016\/05\/01\/wraith\/<\/a><\/figcaption><\/figure><p>Tentu visual regression testing berguna untuk mentrack perubahan pada UI kita secara visual. Sehingga kita tau element mana saja yang berubah. Tujuan nya sama saja dengan Snapshot testing: untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/p>\n<p>Library yang biasa digunakan untuk Visual Regression Testing: <a href=\"http:\/\/phantomjs.org\/\">PhantomJS<\/a> (beserta plugin nya), <a href=\"https:\/\/garris.github.io\/BackstopJS\/\">BackstopJS<\/a>, dan\u00a0<a href=\"https:\/\/cypress.io\/\">Cypress<\/a>.<\/p>\n<h3>Testing apa saja yang harus saya\u00a0pilih?<\/h3>\n<p>Jika kamu menggunakan metodologi TDD, maka Unit Testing &amp; Integration Testing. Karena Snapshot Testing, E2E Testing, dan Visual Regression Testing dilakukan ketika kita sudah membuat code yang sebenarnya (production code)<\/p>\n<p>E2E Testing mungkin sangat recommended, daripada [\u2018QA Tester\u2019, \u2018Developer\u2019, \u2018Co-worker\u2019], atau bahkan user mengetest dan menemukan bug pada aplikasi kamu secara manual. Meskipun <em>tracable <\/em>menggunakan Error Logger (Sentry misalnya), tapi men-deliver aplikasi yang <em>stable<\/em> dan <em>less bug<\/em> ke pengguna akhir tentu lebih nyaman (karena sudah di test) dibanding kamu harus di japri pada waktu istirahat\/nyantai\/liburan ketika ada bug yang tak terduga di production<\/p>\n<p>Jika kamu malas membuat test untuk snapshot testing &amp; visual regression testing, kamu bisa menggunakan layanan alternatif seperti <a href=\"https:\/\/saucelabs.com\/\">Saucelabs<\/a> dan <a href=\"https:\/\/www.browserstack.com\/\">BrowserStack<\/a> agar kamu bisa melihat hasil render langsung dari beberapa device, browser, dan beberapa sistem\u00a0operasi.<\/p>\n<p>Ya, kita Frontend Developer. Kita membuat UI yang nyaman dilihat di sistem operasi\u200a\u2014\u200aWindows, Linux, Mac, iOS, Android, Windows Phone\u200a\u2014\u200adi browser\u200a\u2014\u200aWebkit family, Gecko Family, Firefox, Brave, Safari, Internet Explorer, Microsoft Edge, Google Chrome, Yandex, Opera, Opera Mini, Vivaldi, Dolphin Browser\u200a\u2014\u200adi beberapa device (mobile, tablet, desktop)\u200a\u2014\u200adi beberapa orientation\u200a\u2014\u200aLandscape dan Potrait\u200a\u2014\u200adan lain-lain.<\/p>\n<p>Kita pun harus membuat halaman memiliki performa yang\u00a0cepat.<\/p>\n<p>SEO yang\u00a0bagus.<\/p>\n<p>Interaksi yang responsif dan\u00a0nyaman.<\/p>\n<p>Basic Frontend Security.<\/p>\n<p>Memiliki tampilan yang indah\u00a0dilihat<\/p>\n<p>Daaaan\u2026.<\/p>\n<a href=\"https:\/\/medium.com\/media\/67db6c2b4e80e86f6f05ca8b3a36cdf3\/href\">https:\/\/medium.com\/media\/67db6c2b4e80e86f6f05ca8b3a36cdf3\/href<\/a><p>Sekian. Jika ada kesalahan, mohon diperbaiki.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c1e27e7e2742\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/testing-untuk-frontend-web-developer-ui-engineer-c1e27e7e2742\">Testing untuk Frontend Web Developer\/UI Engineer<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*9QQWzkq42oT_kJ7S.\"><figcaption>\u201cLong colorful lines of code on a computer screen\u201d by <a href=\"https:\/\/unsplash.com\/@markusspiske?utm_source=medium&amp;utm_medium=referral\">Markus Spiske<\/a> on\u00a0<a href=\"https:\/\/unsplash.com\/?utm_source=medium&amp;utm_medium=referral\">Unsplash<\/a><\/figcaption><\/figure><h4>Karena Frontend Developer tidak hanya mengconvert design menjadi\u00a0halaman<\/h4>\n<h3>Latar Belakang<\/h3>\n<p>Sudah 9 bulan lebih saya bekerja menjadi seorang Frontend Developer di sebuah startup yang bergerak di bidang edukasi. Karena produk kami merupakan produk digital\u200a\u2014\u200asalah satu nya berbentuk website\u200a\u2014\u200adan kebetulan saya merupakan penanggung jawab di hasil akhir untuk pengguna langsung di\u00a0website.<\/p>\n<p>Banyak yang saya pelajari dari menjadi seorang Frontend Developer untuk skala enterprise. Salah satu nya adalah tentang penting nya testing. Sebelum nya saya <strong>tidak pernah <\/strong>menulis testing sedikitpun di Frontend, karena memang saya belum menemukan penting nya testing di Frontend. Terlebih saya termasuk orang yang belajar <a href=\"https:\/\/en.wikipedia.org\/wiki\/Just-in-time_teaching\">Just In Time<\/a>, mempelajari nya ketika memang\u00a0butuh.<\/p>\n<p>Dan karena dulu belum butuh-butuh banget sama testing, jadi belum dipelajari. Dan setelah \u2018tau\u2019 penting nya menulis test, baru saya pelajari perlahan.<\/p>\n<h3>Kenapa menulis\u00a0test?<\/h3>\n<p>Sebagai seorang Frontend Developer yang bekerja langsung dengan tampilan akhir, terkadang kita merasa <em>ngapain sih nulis testing segala, kan kita test nya bisa langsung di real\u00a0browser?<\/em><\/p>\n<p>Itu enggak salah, setidaknya untuk saat ini. Apakah kalian pernah merasakan dikirim pesan di Telegram\/Slack oleh seorang QA Tester atau siapapun tentang bug yang ada pada UI kita? Sebagai seorang Frontend Developer di era sekarang, kita tidak hanya mengubah desain menjadi suatu halaman. User Interface merupakan sebuah fungsi pada state di aplikasi\u00a0kita.<\/p>\n<p>Setiap state yang berubah pada aplikasi kita, kita ingin tampilan tersebut merefleksikan perubahan nya. State bila data tidak ada, maka tampilan nya seperti apa; State ketika user sedang menginput di searchbar, maka tampilan nya seperti apa. Dan lain-lain.<\/p>\n<p>Agar semua nya <em>make sure works well, <\/em>tentu kita perlu menulis test agar proses lebih efektif. Tentu testing secara automatis lebih efektif daripada manual,\u00a0kan?<\/p>\n<h3>Testing untuk Frontend Developer\/UI Engineer<\/h3>\n<p>Sama seperti untuk developer apapun. Unit Testing, Integration Testing dan End-to-End Testing. Tapi untuk yang bekerja di Web, dua testing ekslusif: Visual Regression Testing &amp; Snapshot\u00a0Testing.<\/p>\n<p>Kita akan bahas satu-satu.<\/p>\n<h4>Unit Testing<\/h4>\n<p>Unit Testing merupakan proses testing dari hal-hal yang terkecil. Misal kita membuat sebuah component Search Bar dari component Navbar (saya ambil contoh dari KelasKita)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*QwTPHLU24NM7_Hvs9uNPXA.png\"><figcaption>Navbar di KelasKita<\/figcaption><\/figure><p>Unit-unit yang akan kita test dari Search Bar tersebut\u00a0adalah:<\/p>\n<ol>\n<li>Apakah component berhasil di\u00a0mount?<\/li>\n<li>Kita mengetik: \u201cBelajar Android\u201d, apakah state nya sama dengan apa yang kita ketik (Belajar Android)?<\/li>\n<li>Apakah muncul hasil pencarian (dari data dummy), misal: \u201cBelajar Android untuk pemula\u201d, \u201cBelajar Android selama 99 hari\u201d, dan \u201cBelajar Android dengan React\u00a0Native\u201d<\/li>\n<li>Membuat validasi, misal minimal kita input 3 karakter. Apakah fungsi di submit sukses\/gagal apabila kata kunci kurang dari 3 karakter?<\/li>\n<li>Apakah icon search tersebut bisa diklik apabila kata kunci kurang dari 3 karakter?<\/li>\n<\/ol>\n<p>Hal yang perlu diingat adalah jangan menulis test ketika proses development; Bila kamu menggunakan proses Test-driven Development, karena sudah jelas: TDD merupakan proses pengembangan yang di-stir oleh\u00a0test.<\/p>\n<p>Jadi sebelum kamu menulis kode \u2018asli\u2019, kamu harus menulis testing nya terlebih dahulu. Ini yang buat saya bingung waktu\u00a0dulu.<\/p>\n<p>Lanjut. Hasil dari testing hanya satu dari 2 pilihan: Sukses &amp; Gagal. Karena di TDD ini siklus nya seperti\u00a0ini:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/390\/1*YHpXjjK5id5GJO3c8mAtJg.png\"><figcaption>Red -&gt; Green -&gt;\u00a0Refactor<\/figcaption><\/figure><p>Apa maksud dari siklus tersebut?<\/p>\n<ol>\n<li>Tulis test case tersebut (dan pasti\u00a0gagal)<\/li>\n<li>Tulis kode yang membuat test case tersebut\u00a0sukses<\/li>\n<li>Refactor code<\/li>\n<\/ol>\n<p>Misal kita ambil contoh dari test case diatas, <em>Apakah component berhasil di mount? <\/em>Kita gunakan pseudo-code terlebih dahulu untuk saat\u00a0ini:<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ undefined!<\/pre>\n<pre>}())<\/pre>\n<p>Tentu gagal, karena searchBarComponent tidak ada. Mari kita buat test tersebut berhasil.<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>  &lt;input class=\"c-searchbar qa-searchbar\" \/&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Sekarang test tersebut berhasil. Mari kita refactor kode\u00a0nya.<\/p>\n<pre>&lt;!-- HTML --&gt;<\/pre>\n<pre>&lt;body&gt;<br>  &lt;form&gt;<br>    &lt;input<br>      type=\"text\"<br>      class=\"c-searchbar qa-searchbar\"<br>      placeholder=\"Cari kelas atau keterampilan yang ingin kamu pelajari\"<br>    \/&gt;<br>  &lt;\/form&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Lalu testing lagi, apakah sukses\/gagal? Jika sukses, buat test lain, jika gagal, lakukan perubahan agar test tersebut berhasil.<\/p>\n<blockquote>Yaelaaa Riz, gitu doang mah masih bikin enggak ngerti sama Unit Testing. Contoh lagi,\u00a0dong!<\/blockquote>\n<p>Test case kedua: Kita mengetik: \u201cBelajar Android\u201d, apakah state nya sama dengan apa yang kita ketik (Belajar Android)?<\/p>\n<pre>&lt;!-- html --&gt;<br>&lt;body&gt;<br>  &lt;form&gt;<br>    &lt;input<br>      type=\"text\"<br>      class=\"c-searchbar qa-searchbar\"<br>      placeholder=\"Cari kelas atau keterampilan yang ingin kamu pelajari\"<br>    \/&gt;<br>  &lt;\/form&gt;<br>&lt;\/body&gt;<\/pre>\n<pre>\/\/ JavaScript<\/pre>\n<pre>(function () {<\/pre>\n<pre>  const searchBarComponent = document.querySelector('.c-searchbar.qa-searchbar')<\/pre>\n<pre>  const appState = { searchQuery: '' }<\/pre>\n<pre>  searchBarComponent.value = \"Belajar Android\"<\/pre>\n<pre>  \/\/ Okay this is weird, I'm sorry.<\/pre>\n<pre>  appState.searchQuery = searchBarComponent.value<\/pre>\n<pre>  \/\/ Test 1<\/pre>\n<pre>  console.log(searchBarComponent.length &gt; 0) \/\/ pass!<\/pre>\n<pre>  \/\/ Test 2<\/pre>\n<pre>  console.log(searchBarComponent.value === appState.searchQuery) \/\/ pass!<\/pre>\n<pre>}())<\/pre>\n<p>Okay ini berhasil. Meskipun sangat tidak disarankan (cuma buat contoh aja\u00a0ya).<\/p>\n<h4>Integration Testing<\/h4>\n<p>Setelah kita melakukan proses development berdasarkan dari unit-unit kecil yang dibuat beserta fungsionalitas nya, sekarang kita akan mulai ke integration testing.<\/p>\n<p>Agar tidak pusing tentang perbedaan Integration Testing dengan Unit Testing, Unit Testing adalah mentesting fungsionalitas dari unit-unit tersebut, sedangkan Integration Testing adalah mentesting dengan real data (integrasi)<\/p>\n<p>Masih di Searchbar tadi, anggap semua testing tersebut sudah berhasil. Lalu kita integrasi dengan real\u00a0data.<\/p>\n<ol>\n<li>Ketika user input dan lebih dari 3 karakter, maka request ke: <a href=\"https:\/\/domain.com\/api\/v1\/search\/?q=kataKunci\">https:\/\/domain.com\/api\/v1\/search\/?q=kataKunci<\/a>\n<\/li>\n<li>Apakah request berhasil?<\/li>\n<li>Apakah menampilkan hasil data berdasarkan kata kunci tersebut?<\/li>\n<\/ol>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*EvPXBfeHkFeM4Mq_04_6UA.png\"><figcaption>Dropdown hasil pencarian yang data nya diambil dari system. Mungkin search logic nya menggunakan fuzzy\u00a0search<\/figcaption><\/figure><p>Make it\u00a0fail:<\/p>\n<p>\u274e Not request to endpoint<br>\u274e Only type \u2264 2 characters<\/p>\n<p>Make it\u00a0pass:<\/p>\n<p>\u2705 Request to endpoint<br>\u2705 Input \u2265 3 characters<\/p>\n<p>Make it\u00a0better:<\/p>\n<p>\u2705 Show warning message if user input \u2264 2 characters<\/p>\n<p>Library yang biasa digunakan untuk Unit Testing &amp; Integration Testing: <a href=\"https:\/\/facebook.github.io\/jest\/\">Jest<\/a>, <a href=\"https:\/\/github.com\/avajs\/ava\">Ava<\/a>, <a href=\"https:\/\/chaijs.com\/\">Chai<\/a> dan\u00a0<a href=\"https:\/\/github.com\/substack\/tape\">Tape<\/a>.<\/p>\n<h4>End-to-End Testing<\/h4>\n<p>End-to-End testing merupakan testing yang benar-benar seperti bagaimana user menggunakan aplikasi kita. Ketika Unit Testing &amp; Integration Testing hanya melakukan berdasarkan skenario, end-to-end testing benar-benar berdasarkan interaksi user didunia\u00a0nyata.<\/p>\n<p>Masih mengambil contoh di searchbar.<\/p>\n<p>User klik searchbar, lalu ketik \u201cBe\u201d. Kita buat delay selama 3 detik, karena searchbar harus diisi dengan 3 karakter lebih, maka akan menampilkan error\u00a0message.<\/p>\n<p>Dan kita bisa tau error message nya itu seperti apa tampilan nya. Lalu dilanjutkan dengan mengetik \u201cBelajar Android\u2026\u201d. Lalu muncul hasil pencarian. Lalu user klik salah satu link nya. Case untuk \u201cEnd-to-end testing searchbar pun selesai\u201d.<\/p>\n<p>Bedanya dengan tes langsung di browser adalah: Automatisasi. Ya, kita enggak usah capek-capek ngelakuin all possible action secara\u00a0manual.<\/p>\n<p>Library yang biasa digunakan untuk E2E Testing: <a href=\"http:\/\/www.seleniumhq.org\/\">Selenium<\/a>, <a href=\"http:\/\/www.protractortest.org\/\">Protractor<\/a>, dan <a href=\"https:\/\/www.cypress.io\/\">Cypress<\/a> (Very looks promising!)<\/p>\n<h4>Snapshot Testing<\/h4>\n<p>Snapshot testing mungkin hanya berlaku di yang component-based, seperti React, Vue, dll. Snapshot Testing berguna untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/p>\n<p>Jadi pertama kita lakukan snapshot testing, dan ketika sukses akan menyimpan snapshot tersebut. Snapshot berbeda dengan screenshot, karena disini tidak menyimpan\/membandingkan piksel sedikitpun.<\/p>\n<p>Workflownya: Kamu bikin component, lalu buat snapshot testing. Bila belum memiliki snapshot sebelumnya yang disimpan, maka dibuat. Dan test pasti pass. Jika snapshot sebelumnya ternyata sudah ada, maka bandingkan. Jika beda, maka test\u00a0fail.<\/p>\n<p>Saya belum menemukan \u2018manfaat\u2019 dari snapshot testing ini, jadi belum tertarik untuk mempelajari nya lebih\u00a0lanjut.<\/p>\n<p>Berdasarkan dari dokumentasi nya tentang manfaat Snapshot\u00a0Testing:<\/p>\n<blockquote>Snapshot Testing berguna untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/blockquote>\n<p>Terlihat sangat bermanfaat. Siapa sih yang enggak mau UI nya berubah dan ternyata perubahan nya tidak sesuai dengan espektasi kita? Jika menurut saya, snapshot testing ini bisa di case seperti\u00a0ini:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*vktmI8QLgyZ9lsZGWuxnGA.png\"><figcaption>Related category by topic di KelasKita<\/figcaption><\/figure><p>Related by Topic di KelasKita selalu berubah data nya (secara random) setiap top-level component dibuat (created, yeah we use Vue!). Lalu saya buat snapshot\u00a0nya.<\/p>\n<p>Lalu saya membuat perubahan. Misalnya data di random setiap ada perubahan di component. Ketika saya melakukan snapshot testing, pasti gagal. Karena beda dengan snapshot sebelumnya.<\/p>\n<p>Jika ternyata perubahan tersebut sesuai espektasi kita, maka update snapshot. Jika tidak, maka kita perbaiki apa yang membuat UI tersebut\u00a0berbeda.<\/p>\n<p>Library yang biasa digunakan untuk Snapshot Testing:\u00a0<a href=\"https:\/\/facebook.github.io\/jest\/\">Jest<\/a><\/p>\n<h4>Visual Regression Testing<\/h4>\n<p>Ketika snapshot testing membandingkan snapshot (berbentuk text) yang dihasilkan dari hasil render, visual regression testing membandingkan berdasarkan screenshot (pixel).<\/p>\n<p>Contoh Visual Regression Testing:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/899\/1*uVyNvsaS6fxcSchrkasyKQ.png\"><figcaption>Contoh Visual Regression Testing diambil dari: <a href=\"https:\/\/www.thecrumb.com\/2016\/05\/01\/wraith\/\">https:\/\/www.thecrumb.com\/2016\/05\/01\/wraith\/<\/a><\/figcaption><\/figure><p>Tentu visual regression testing berguna untuk mentrack perubahan pada UI kita secara visual. Sehingga kita tau element mana saja yang berubah. Tujuan nya sama saja dengan Snapshot testing: untuk mencegah perubahan UI yang tidak sesuai espektasi kita.<\/p>\n<p>Library yang biasa digunakan untuk Visual Regression Testing: <a href=\"http:\/\/phantomjs.org\/\">PhantomJS<\/a> (beserta plugin nya), <a href=\"https:\/\/garris.github.io\/BackstopJS\/\">BackstopJS<\/a>, dan\u00a0<a href=\"https:\/\/cypress.io\/\">Cypress<\/a>.<\/p>\n<h3>Testing apa saja yang harus saya\u00a0pilih?<\/h3>\n<p>Jika kamu menggunakan metodologi TDD, maka Unit Testing &amp; Integration Testing. Karena Snapshot Testing, E2E Testing, dan Visual Regression Testing dilakukan ketika kita sudah membuat code yang sebenarnya (production code)<\/p>\n<p>E2E Testing mungkin sangat recommended, daripada [\u2018QA Tester\u2019, \u2018Developer\u2019, \u2018Co-worker\u2019], atau bahkan user mengetest dan menemukan bug pada aplikasi kamu secara manual. Meskipun <em>tracable <\/em>menggunakan Error Logger (Sentry misalnya), tapi men-deliver aplikasi yang <em>stable<\/em> dan <em>less bug<\/em> ke pengguna akhir tentu lebih nyaman (karena sudah di test) dibanding kamu harus di japri pada waktu istirahat\/nyantai\/liburan ketika ada bug yang tak terduga di production<\/p>\n<p>Jika kamu malas membuat test untuk snapshot testing &amp; visual regression testing, kamu bisa menggunakan layanan alternatif seperti <a href=\"https:\/\/saucelabs.com\/\">Saucelabs<\/a> dan <a href=\"https:\/\/www.browserstack.com\/\">BrowserStack<\/a> agar kamu bisa melihat hasil render langsung dari beberapa device, browser, dan beberapa sistem\u00a0operasi.<\/p>\n<p>Ya, kita Frontend Developer. Kita membuat UI yang nyaman dilihat di sistem operasi\u200a\u2014\u200aWindows, Linux, Mac, iOS, Android, Windows Phone\u200a\u2014\u200adi browser\u200a\u2014\u200aWebkit family, Gecko Family, Firefox, Brave, Safari, Internet Explorer, Microsoft Edge, Google Chrome, Yandex, Opera, Opera Mini, Vivaldi, Dolphin Browser\u200a\u2014\u200adi beberapa device (mobile, tablet, desktop)\u200a\u2014\u200adi beberapa orientation\u200a\u2014\u200aLandscape dan Potrait\u200a\u2014\u200adan lain-lain.<\/p>\n<p>Kita pun harus membuat halaman memiliki performa yang\u00a0cepat.<\/p>\n<p>SEO yang\u00a0bagus.<\/p>\n<p>Interaksi yang responsif dan\u00a0nyaman.<\/p>\n<p>Basic Frontend Security.<\/p>\n<p>Memiliki tampilan yang indah\u00a0dilihat<\/p>\n<p>Daaaan\u2026.<\/p>\n<a href=\"https:\/\/medium.com\/media\/67db6c2b4e80e86f6f05ca8b3a36cdf3\/href\">https:\/\/medium.com\/media\/67db6c2b4e80e86f6f05ca8b3a36cdf3\/href<\/a><p>Sekian. Jika ada kesalahan, mohon diperbaiki.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c1e27e7e2742\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/testing-untuk-frontend-web-developer-ui-engineer-c1e27e7e2742\">Testing untuk Frontend Web Developer\/UI Engineer<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["frontend-development","snapshot-testing","unit-testing","frontend-testing","integration-testing"]},{"title":"Yang Web Developers Harus Tahu #6","pubDate":"2018-02-15 10:31:55","link":"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-6-6e5c5667b659?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/6e5c5667b659","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/640\/1*znfrTQJg_P0T1dJRvTyPUg.png","description":"\n<p>Mendekati Imlek, dan libur panjang saatnya kalian punya bacaan untuk <em>long weekend<\/em>. Di tengah kesibukan beberapa dari kalian yang lagi mengulik <a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">tantangan untuk membuat <em>webapp<\/em> bisa digunakan dalam 5 detik<\/a>, mungkin beberapa update dan artikel menarik di bawah ini bisa jadi pengisi waktu luang kalian. Gong xi fa\u00a0cai!<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/developers-id.googleblog.com\/2018\/02\/era-web-yang-aman-kini-telah-hadir.html\"><strong>Chrome akan menampilkan tanda sebuah web tidak aman tanpa\u00a0HTTPS<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/640\/1*znfrTQJg_P0T1dJRvTyPUg.png\"><figcaption>Tampilan website tanpa HTTPS per July\u00a02018<\/figcaption><\/figure><p>Inisiatif yang sebenarnya cukup lama untuk membuat web bisa lebih aman dengan protokol yang terenkripsi menggunakan HTTPS akan diperketat lagi. Sebelumnya Chrome per Januari 2017 lalu hanya menandai sebuah website tidak aman bila melakukan pengumpulan data privat seperti password dan kartu kredit. Namun per Juli 2018 nanti, semua website yang tidak menggunakan protokol HTTPS akan ditandai sebagai website yang tidak\u00a0aman.<\/p>\n<p><a href=\"https:\/\/medium.com\/progressive-web-apps\/2018-state-of-progressive-web-apps-f7517d43ba70\"><strong>State Progressive Web App\u00a02018<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/775\/1*guopyuWkgQY8KDVtR0Z8bA.png\"><figcaption>Features PWA yang diadopsi pengembang<\/figcaption><\/figure><p>Progressive Web App sudah cukup lama muncul dan adopsinya sudah cukup meluas dikalangan pengembang web. Seperti apa kondisi baik dari sisi tool, developer, dan startup? Ulasan di artikel ini sangat menarik untuk dibaca bila kalian memutuskan untuk mengembangkan website kalian menjadi\u00a0PWA.<\/p>\n<p><a href=\"https:\/\/www.meetup.com\/JakartaJS\/events\/247676332\/\"><strong>JakartaJS Meetup dengan Ariya\u00a0Hidayat<\/strong><\/a><\/p>\n<p>Tanggal 20 Februari nanti, buat kalian yang tinggal di Jakarta dan sekitarnya bakal punya kesempatan untuk berbincang langsung dengan <a href=\"https:\/\/www.codepolitan.com\/ariya-hidayat-seseorang-dibalik-phantomjs-dan-esprima\">Ariya Hidayat<\/a>, salah satu tokoh JavaScript populer asal Indonesia namun tinggal di US. Beliau membuat <a href=\"http:\/\/phantomjs.org\/\">PhantomJS<\/a> yang merupakan <em>library<\/em> untuk <em>functional testing<\/em> banyak digunakan oleh para pengembang JavaScript. Jangan ketinggalan segera daftar di halaman <a href=\"https:\/\/www.meetup.com\/JakartaJS\/events\/247676332\/\">Meetup JakartaJS<\/a>.<\/p>\n<p><a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\"><strong>Tantangan untuk para web developer membuat website bisa interaktif dalam 5\u00a0detik<\/strong><\/a><\/p>\n<p>Kondisi jaringan selular Indonesia 53% masih dalam kondisi 3G, dan mayoritas smartphone yang digunakan merupakan spesifikasi rendah dengan harga 2 juta kebawah. Apakah para web developer Indonesia bisa membuat website yang bisa digunakan dalam waktu 5 detik? Silakan <a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">mencoba tantangan ini<\/a>.<\/p>\n<p><a href=\"https:\/\/webkit.org\/blog\/8090\/workers-at-your-service\/\"><strong>Service Worker di\u00a0Safari<\/strong><\/a><\/p>\n<p>Service worker sudah tersedia di Safari Preview dan akan segera dirilis ke semua pengguna. Buat kalian yang ingin memastikan aplikasi PWA kalian juga berjalan baik di Safari, update ini perlu kalian baca agar dapat paham bagaimana service worker akan berjalan di\u00a0Safari.<\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=gbmME8gX-yQ&amp;list=PLXTOW_XMsIDSl5iyPxgtEI0ts5HfBTH8c\"><strong>Rekaman video AMP Conference 2018 sudah tersedia di\u00a0Youtube<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*BYFSkjDPOD-OATNruh4jNQ.png\"><figcaption>AMP Conf 2018 Amsterdam, 13\u201314 Februari\u00a02018<\/figcaption><\/figure><p>AMP yang merupakan inisiatif Google untuk memberikan pengalaman lebih baik bagi pengguna dengan mengfokuskan pada kecepatan tampil telah mengadakan conference mereka di Amsterdam, Belanda pada 13\u201314 Februari kemarin. Kalian sudah bisa menonton video rekamannya di <a href=\"https:\/\/www.youtube.com\/channel\/UCXPBsjgKKG2HqsKBhWA4uQw\">channel Youtube\u00a0AMP<\/a>.<\/p>\n<h3>Konten Menarik<\/h3>\n<p><a href=\"https:\/\/medium.com\/@andreas_66372\/building-a-valentines-day-meme-generator-via-lit-html-and-webcomponents-4e013ca1a8dd\"><strong>Membuat Valentine Day generator dengan\u00a0LitHTML<\/strong><\/a><\/p>\n<p>DOM rendering seperti virtual DOM sedang rame diperbincangkan karena framework populer seperti React dan Vue menggunakan konsep virtual DOM ini dalam rendering component-nya. Web Component yang merupakan standar di web juga mengarah ke konsep rendering tanpa menggunakan virtual DOM dan lebih fokus pada <a href=\"https:\/\/www.polymer-project.org\/2.0\/docs\/devguide\/shadow-dom\">shadow DOM<\/a>. Untuk kalian yang ingin bermain dengan <a href=\"https:\/\/www.webcomponents.org\/\">Web Component<\/a> bisa mencoba artikel ini dibantu oleh LitHTML\u00a0library.<\/p>\n<p><a href=\"https:\/\/medium.com\/actualize-network\/modern-css-explained-for-dinosaurs-5226febe3525\"><strong>Modern CSS dijelaskan oleh dinosaurus<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*UkeUVKWHHTeg2-gGihQ_6g.png\"><figcaption>Modern CSS oleh dinasaurus<\/figcaption><\/figure><p>Buat kalian yang baru memulai di pengembangan web, maka artikel ini akan sangat membantu pemahaman lebih lanjut terkait CSS karena dijelaskan bagaimana awalnya CSS digunakan untuk styling halaman web hingga bertransformasi dengan beragam cara penggunaan untuk optimalisasi performance dan kemudahan penulisan.<\/p>\n<p><a href=\"https:\/\/www.smashingmagazine.com\/2018\/02\/progressive-image-loading-user-perceived-performance\/\"><strong>Loading gambar secara progresif dan menangani persepsi user terhadap kecepatan tampil<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*QVS7gPEM1SbvjYgLAmNhVw.png\"><figcaption>Teknik dalam menjaga persepsi user pada kecepatan tampil<\/figcaption><\/figure><p>File gambar di web merupakan salah satu yang mempengaruhi kecepatan halaman website ditampilkan. Beragam teknik tersedia bagaimana agar gambar bisa ditampilkan tanpa mempengaruhi kecepatan tampil secara keseluruhan. Artikel ini memberikan gambaran detail bagaimana membangun persepsi user pada saat melakukan <em>loading<\/em> gambar di halaman website sehingga user tetap nyaman dalam mengakses halaman website tersebut.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/webpack\/\"><strong>Mengoptimalkan kecepatan website dengan\u00a0Webpack<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/995\/1*XZWH3QSmmWI4M2PIkIVWCw.png\"><figcaption>Optimalisasi kumpulan kode dengan\u00a0Webpack<\/figcaption><\/figure><p>Buat kalian yang menggunakan <a href=\"https:\/\/webpack.js.org\/\">Webpack<\/a> dalam pengembangan aplikasi web kalian, pengaturan default tidaklah cukup membuat website bisa tampil dan digunakan dengan cepat. Diperlukan beberapa pengaturan dan optimalisasi seperti <em>tree shaking, code splliting<\/em>, dan teknik lainnya. Di artikel ini dibahas langkah-langkah pengaturan Webpack untuk optimalisasi kecepatan tampil aplikasi web\u00a0kalian.<\/p>\n<h3>Tools, Libraries, dan Frameworks<\/h3>\n<p><a href=\"https:\/\/www.smashingmagazine.com\/2018\/02\/jquery-vue-javascript\/\"><strong>Menggantikan jQuery dengan\u00a0VueJS<\/strong><\/a><\/p>\n<p>Buat kalian yang masih menggunakan jQuery, mungkin sudah saatnya menggantinya dengan library modern seperti salah satunya <a href=\"https:\/\/vuejs.org\/\">VueJS<\/a> yang dicontohkan di artikel ini. Menulis ulang sebuah aplikasi terkadang bukanlah pilihan gampang. Namun dengan <a href=\"https:\/\/vuejs.org\/\">VueJS<\/a> transisi dari jQuery tidaklah memerlukan perubahan drastis di aplikasi kalian. Kalian bisa memulai dari beberapa komponen.<\/p>\n<p><a href=\"https:\/\/medium.freecodecamp.org\/introducing-rekit-studio-a-real-ide-for-react-and-redux-development-baf0c99cb542\"><strong>Rekit Studio, IDE untuk React dan\u00a0Redux<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*z7i_6yQIQobd3Ay0Wlybmg.png\"><figcaption>Rekit Studio<\/figcaption><\/figure><p>Buat kalian yang menggunakan React Redux dalam pengembangan aplikasi web, mungkin kalian bisa mencoba menggunakan <em>Integrated Development Environment(IDE) <\/em>Redik ini. Bukan sekedar code editor, IDE ini juga memberikan kemampuan untuk <em>code generation, dependency diagraming, refactoring, building, unit tests<\/em>, dan kemudahan untuk bernavigasi di kode\u00a0sumber.<\/p>\n<p><a href=\"https:\/\/github.com\/developit\/greenlet\"><strong>Greenlet, library untuk memindahkan fungsi ke thread\u00a0Worker<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*f-bBS8HQBwJgwprFBCoBSQ.png\"><figcaption>Greenlet, menjalankan eksekusi fungsi di\u00a0Worker<\/figcaption><\/figure><p>Pemisahan <em>thread<\/em> pada saat menjalankan suatu proses diperlukan untuk memastikan bahwa animasi atau interaksi seperti <em>scrolling<\/em> di halaman web bisa lebih lancar. Greenlet memudahkan pengembang web untuk menjalankan fungsi di<em> <\/em><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Worker\"><em>thread Worker<\/em><\/a> yang tidak mengganggu <em>thread<\/em>\u00a0utama.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6e5c5667b659\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-6-6e5c5667b659\">Yang Web Developers Harus Tahu #6<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Mendekati Imlek, dan libur panjang saatnya kalian punya bacaan untuk <em>long weekend<\/em>. Di tengah kesibukan beberapa dari kalian yang lagi mengulik <a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">tantangan untuk membuat <em>webapp<\/em> bisa digunakan dalam 5 detik<\/a>, mungkin beberapa update dan artikel menarik di bawah ini bisa jadi pengisi waktu luang kalian. Gong xi fa\u00a0cai!<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/developers-id.googleblog.com\/2018\/02\/era-web-yang-aman-kini-telah-hadir.html\"><strong>Chrome akan menampilkan tanda sebuah web tidak aman tanpa\u00a0HTTPS<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/640\/1*znfrTQJg_P0T1dJRvTyPUg.png\"><figcaption>Tampilan website tanpa HTTPS per July\u00a02018<\/figcaption><\/figure><p>Inisiatif yang sebenarnya cukup lama untuk membuat web bisa lebih aman dengan protokol yang terenkripsi menggunakan HTTPS akan diperketat lagi. Sebelumnya Chrome per Januari 2017 lalu hanya menandai sebuah website tidak aman bila melakukan pengumpulan data privat seperti password dan kartu kredit. Namun per Juli 2018 nanti, semua website yang tidak menggunakan protokol HTTPS akan ditandai sebagai website yang tidak\u00a0aman.<\/p>\n<p><a href=\"https:\/\/medium.com\/progressive-web-apps\/2018-state-of-progressive-web-apps-f7517d43ba70\"><strong>State Progressive Web App\u00a02018<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/775\/1*guopyuWkgQY8KDVtR0Z8bA.png\"><figcaption>Features PWA yang diadopsi pengembang<\/figcaption><\/figure><p>Progressive Web App sudah cukup lama muncul dan adopsinya sudah cukup meluas dikalangan pengembang web. Seperti apa kondisi baik dari sisi tool, developer, dan startup? Ulasan di artikel ini sangat menarik untuk dibaca bila kalian memutuskan untuk mengembangkan website kalian menjadi\u00a0PWA.<\/p>\n<p><a href=\"https:\/\/www.meetup.com\/JakartaJS\/events\/247676332\/\"><strong>JakartaJS Meetup dengan Ariya\u00a0Hidayat<\/strong><\/a><\/p>\n<p>Tanggal 20 Februari nanti, buat kalian yang tinggal di Jakarta dan sekitarnya bakal punya kesempatan untuk berbincang langsung dengan <a href=\"https:\/\/www.codepolitan.com\/ariya-hidayat-seseorang-dibalik-phantomjs-dan-esprima\">Ariya Hidayat<\/a>, salah satu tokoh JavaScript populer asal Indonesia namun tinggal di US. Beliau membuat <a href=\"http:\/\/phantomjs.org\/\">PhantomJS<\/a> yang merupakan <em>library<\/em> untuk <em>functional testing<\/em> banyak digunakan oleh para pengembang JavaScript. Jangan ketinggalan segera daftar di halaman <a href=\"https:\/\/www.meetup.com\/JakartaJS\/events\/247676332\/\">Meetup JakartaJS<\/a>.<\/p>\n<p><a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\"><strong>Tantangan untuk para web developer membuat website bisa interaktif dalam 5\u00a0detik<\/strong><\/a><\/p>\n<p>Kondisi jaringan selular Indonesia 53% masih dalam kondisi 3G, dan mayoritas smartphone yang digunakan merupakan spesifikasi rendah dengan harga 2 juta kebawah. Apakah para web developer Indonesia bisa membuat website yang bisa digunakan dalam waktu 5 detik? Silakan <a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">mencoba tantangan ini<\/a>.<\/p>\n<p><a href=\"https:\/\/webkit.org\/blog\/8090\/workers-at-your-service\/\"><strong>Service Worker di\u00a0Safari<\/strong><\/a><\/p>\n<p>Service worker sudah tersedia di Safari Preview dan akan segera dirilis ke semua pengguna. Buat kalian yang ingin memastikan aplikasi PWA kalian juga berjalan baik di Safari, update ini perlu kalian baca agar dapat paham bagaimana service worker akan berjalan di\u00a0Safari.<\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=gbmME8gX-yQ&amp;list=PLXTOW_XMsIDSl5iyPxgtEI0ts5HfBTH8c\"><strong>Rekaman video AMP Conference 2018 sudah tersedia di\u00a0Youtube<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*BYFSkjDPOD-OATNruh4jNQ.png\"><figcaption>AMP Conf 2018 Amsterdam, 13\u201314 Februari\u00a02018<\/figcaption><\/figure><p>AMP yang merupakan inisiatif Google untuk memberikan pengalaman lebih baik bagi pengguna dengan mengfokuskan pada kecepatan tampil telah mengadakan conference mereka di Amsterdam, Belanda pada 13\u201314 Februari kemarin. Kalian sudah bisa menonton video rekamannya di <a href=\"https:\/\/www.youtube.com\/channel\/UCXPBsjgKKG2HqsKBhWA4uQw\">channel Youtube\u00a0AMP<\/a>.<\/p>\n<h3>Konten Menarik<\/h3>\n<p><a href=\"https:\/\/medium.com\/@andreas_66372\/building-a-valentines-day-meme-generator-via-lit-html-and-webcomponents-4e013ca1a8dd\"><strong>Membuat Valentine Day generator dengan\u00a0LitHTML<\/strong><\/a><\/p>\n<p>DOM rendering seperti virtual DOM sedang rame diperbincangkan karena framework populer seperti React dan Vue menggunakan konsep virtual DOM ini dalam rendering component-nya. Web Component yang merupakan standar di web juga mengarah ke konsep rendering tanpa menggunakan virtual DOM dan lebih fokus pada <a href=\"https:\/\/www.polymer-project.org\/2.0\/docs\/devguide\/shadow-dom\">shadow DOM<\/a>. Untuk kalian yang ingin bermain dengan <a href=\"https:\/\/www.webcomponents.org\/\">Web Component<\/a> bisa mencoba artikel ini dibantu oleh LitHTML\u00a0library.<\/p>\n<p><a href=\"https:\/\/medium.com\/actualize-network\/modern-css-explained-for-dinosaurs-5226febe3525\"><strong>Modern CSS dijelaskan oleh dinosaurus<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*UkeUVKWHHTeg2-gGihQ_6g.png\"><figcaption>Modern CSS oleh dinasaurus<\/figcaption><\/figure><p>Buat kalian yang baru memulai di pengembangan web, maka artikel ini akan sangat membantu pemahaman lebih lanjut terkait CSS karena dijelaskan bagaimana awalnya CSS digunakan untuk styling halaman web hingga bertransformasi dengan beragam cara penggunaan untuk optimalisasi performance dan kemudahan penulisan.<\/p>\n<p><a href=\"https:\/\/www.smashingmagazine.com\/2018\/02\/progressive-image-loading-user-perceived-performance\/\"><strong>Loading gambar secara progresif dan menangani persepsi user terhadap kecepatan tampil<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*QVS7gPEM1SbvjYgLAmNhVw.png\"><figcaption>Teknik dalam menjaga persepsi user pada kecepatan tampil<\/figcaption><\/figure><p>File gambar di web merupakan salah satu yang mempengaruhi kecepatan halaman website ditampilkan. Beragam teknik tersedia bagaimana agar gambar bisa ditampilkan tanpa mempengaruhi kecepatan tampil secara keseluruhan. Artikel ini memberikan gambaran detail bagaimana membangun persepsi user pada saat melakukan <em>loading<\/em> gambar di halaman website sehingga user tetap nyaman dalam mengakses halaman website tersebut.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/webpack\/\"><strong>Mengoptimalkan kecepatan website dengan\u00a0Webpack<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/995\/1*XZWH3QSmmWI4M2PIkIVWCw.png\"><figcaption>Optimalisasi kumpulan kode dengan\u00a0Webpack<\/figcaption><\/figure><p>Buat kalian yang menggunakan <a href=\"https:\/\/webpack.js.org\/\">Webpack<\/a> dalam pengembangan aplikasi web kalian, pengaturan default tidaklah cukup membuat website bisa tampil dan digunakan dengan cepat. Diperlukan beberapa pengaturan dan optimalisasi seperti <em>tree shaking, code splliting<\/em>, dan teknik lainnya. Di artikel ini dibahas langkah-langkah pengaturan Webpack untuk optimalisasi kecepatan tampil aplikasi web\u00a0kalian.<\/p>\n<h3>Tools, Libraries, dan Frameworks<\/h3>\n<p><a href=\"https:\/\/www.smashingmagazine.com\/2018\/02\/jquery-vue-javascript\/\"><strong>Menggantikan jQuery dengan\u00a0VueJS<\/strong><\/a><\/p>\n<p>Buat kalian yang masih menggunakan jQuery, mungkin sudah saatnya menggantinya dengan library modern seperti salah satunya <a href=\"https:\/\/vuejs.org\/\">VueJS<\/a> yang dicontohkan di artikel ini. Menulis ulang sebuah aplikasi terkadang bukanlah pilihan gampang. Namun dengan <a href=\"https:\/\/vuejs.org\/\">VueJS<\/a> transisi dari jQuery tidaklah memerlukan perubahan drastis di aplikasi kalian. Kalian bisa memulai dari beberapa komponen.<\/p>\n<p><a href=\"https:\/\/medium.freecodecamp.org\/introducing-rekit-studio-a-real-ide-for-react-and-redux-development-baf0c99cb542\"><strong>Rekit Studio, IDE untuk React dan\u00a0Redux<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*z7i_6yQIQobd3Ay0Wlybmg.png\"><figcaption>Rekit Studio<\/figcaption><\/figure><p>Buat kalian yang menggunakan React Redux dalam pengembangan aplikasi web, mungkin kalian bisa mencoba menggunakan <em>Integrated Development Environment(IDE) <\/em>Redik ini. Bukan sekedar code editor, IDE ini juga memberikan kemampuan untuk <em>code generation, dependency diagraming, refactoring, building, unit tests<\/em>, dan kemudahan untuk bernavigasi di kode\u00a0sumber.<\/p>\n<p><a href=\"https:\/\/github.com\/developit\/greenlet\"><strong>Greenlet, library untuk memindahkan fungsi ke thread\u00a0Worker<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*f-bBS8HQBwJgwprFBCoBSQ.png\"><figcaption>Greenlet, menjalankan eksekusi fungsi di\u00a0Worker<\/figcaption><\/figure><p>Pemisahan <em>thread<\/em> pada saat menjalankan suatu proses diperlukan untuk memastikan bahwa animasi atau interaksi seperti <em>scrolling<\/em> di halaman web bisa lebih lancar. Greenlet memudahkan pengembang web untuk menjalankan fungsi di<em> <\/em><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Worker\"><em>thread Worker<\/em><\/a> yang tidak mengganggu <em>thread<\/em>\u00a0utama.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6e5c5667b659\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-6-6e5c5667b659\">Yang Web Developers Harus Tahu #6<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["progressive-web-app","newsletter","web-development","front-end-development"]},{"title":"Tantangan Web Developer Untuk Membuat Aplikasi Web Bisa Digunakan Kurang Dari 5 Detik","pubDate":"2018-02-13 07:45:58","link":"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/70bb7431741d","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/939\/1*DAksMcGmL2voVF39xrACQA.png","description":"\n<p>Ada banyak jalan menuju Roma, sama dengan ada banyak cara membuat sebuah aplikasi web dan banyak teknik untuk mengoptimalkan sebuah aplikasi web. Cara membuat saat ini sudah cukup banyak tutorialnya, tapi bagaimana dengan teknik mengoptimalkannya?<\/p>\n<p>Tantangan ini ingin mengajak teman-teman web developer Indonesia untuk mencoba membuat sebuah aplikasi RSS reader sederhana dengan goal membuat time to interactive dibawah 5 detik di kondisi jaringan 3G yang lambat dan <em>mobile phone<\/em> dengan spesifikasi menengah rata-rata.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/939\/1*DAksMcGmL2voVF39xrACQA.png\"><\/figure><p>Sebagai gambaran teknis untuk bisa mencapai 5 detik sendiri sebenarnya di kondisi jaringan 3G yang lambat (diasumsikan di 400kbps) maka kita sebenarnya cuma punya waktu sekitar <strong>3,4 detik<\/strong>. Karena sekitar <strong>1,6 detik<\/strong> itu sudah terpakai untuk waktu pemrosesan request lewat jaringan seperti DNS <em>query<\/em>, TCP <em>handshake<\/em>, atau HTTPS <em>handshake<\/em>. Dan dengan perhitungan 3,4 detik dengan kondisi jaringan 400ms <em>round trip<\/em> atau kecepatan 400kbps, maka kita hanya punya <strong>budget ukuran file aplikasi kita sekitar 170KB<\/strong>. Kalau tidak terkompresi dengan GZIP mungkin sekitar\u00a0800KB.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/941\/1*-B9IoqO-bUh_1arH1iG0-A.png\"><figcaption>Time to interactive budget<\/figcaption><\/figure><p>Nah terinpirasi dari tantangan yang sebelumnya sudah ada di luar seperti di <a href=\"https:\/\/hnpwa.com\/\">Hackernews PWA<\/a> ini. Maka kita ingin mencoba membuat tantangan untuk teman-teman web developer Indonesia. Bagaimana bisa membuat sebuah aplikasi web sederhana yang bisa digunakan dalam waktu 5 detik. Nah aturan tantangannya kurang lebih sebagai\u00a0berikut:<\/p>\n<ol>\n<li>Membuat sebuah aplikasi <em>content reader<\/em> dengan menggunakan <a href=\"https:\/\/medium.com\/feed\/wwwid\"><em>feed<\/em> publication WWWID<\/a> ini yang sudah diubah menjadi JSON sehingga bisa dikonsumsi langsung. Silakan menggunakan URL berikut untuk mengakses <em>feed<\/em> JSON.<br><a href=\"https:\/\/api.rss2json.com\/v1\/api.json?rss_url=https%3A%2F%2Fmedium.com%2Ffeed%2Fwwwid\">https:\/\/api.rss2json.com\/v1\/api.json?rss_url=https%3A%2F%2Fmedium.com%2Ffeed%2Fwwwid<\/a>\n<\/li>\n<li>Bebas menggunakan <em>library<\/em> atau <em>framework<\/em> apapun selama bisa diakses melalui <em>browser<\/em> modern seperti Chrome, Firefox, Safari, Opera,\u00a0dll.<\/li>\n<li>Aplikasi content reader ini cukup memiliki 2 halaman, yaitu halaman home dengan daftar <em>latest feed <\/em>di mana pada daftar konten cukup memunculkan\u00a0:<br>* judul artikel<br>* nama penulis<br>* <em>thumbnail<\/em> artikel<br>* satu paragraf artikel.<br>* tanggal artikel di-<em>publish<br><\/em>Dan halaman konten detail di mana sama seperti daftar konten namun memunculkan konten artikel keseluruhan, bukan hanya 1 paragraf.<\/li>\n<li>Feed bisa di-<em>filter<\/em> menggunakan kategori, di mana kategori ini bisa diambil dari field <em>categories<\/em> di tiap konten. <em>Feed filter <\/em>harus punya <em>unique<\/em> URL sehingga kita bisa mengakses konten terkait kategori tersebut langsung via URL misalnya <a href=\"https:\/\/my-reader.app\/cat\/pwa\">https:\/\/my-reader.app\/cat\/pwa<\/a> yang otomatis menampilkan konten PWA\u00a0saja.<\/li>\n<li>Bisa mencapai skor Lighthouse untuk PWA dan Performance diatas\u00a090.<\/li>\n<li>Melakukan <em>testing<\/em> menggunakan <a href=\"https:\/\/www.webpagetest.org\/easy\">Webpagetest mode yang easy<\/a> dan mengaktifkan Lighthouse audit pada saat melakukan test.<\/li>\n<li>Menuliskan bagaimana aplikasi web tersebut dikembangkan dan teknik optimasi yang digunakan seperti apa untuk mencapai skor Lighthouse tersebut.<\/li>\n<li>Bergabung di <a href=\"https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA\">group Telegram<\/a> untuk tanya jawab dan update lebih lanjut. Bergabung di <a href=\"https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA\">https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA<\/a>\n<\/li>\n<li>Mendaftarkan aplikasi web tersebut di <a href=\"https:\/\/goo.gl\/forms\/tBfRLWgDXmIvTvr43\"><strong><em>form<\/em> <em>submission<\/em><\/strong><\/a><em> <\/em>dengan mencantumkan URL web app, Github repo URL, dan Medium article\u00a0URL.<\/li>\n<li>Update progress di Twitter dengan hashtag <a href=\"https:\/\/mobile.twitter.com\/search?q=%23WWWIDChallenge\">#WWWIDChallenge<\/a>\n<\/li>\n<li>\n<a href=\"https:\/\/help.github.com\/articles\/classifying-your-repository-with-topics\/\">Menambahkan topic<\/a> wwwid dan wwwidchallenge di Github repo agar muncul <a href=\"https:\/\/github.com\/topics\/wwwid\">di daftar repo para peserta tantangan<\/a>.<\/li>\n<\/ol>\n<p>Tantangan ini hanya sekedar untuk pembelajaran, bukan untuk berkompetisi. Dengan demikian kita bisa melihat bagaimana di setiap <em>framework\/library<\/em> mengoptimasi sebuah aplikasi agar dapat ditampilkan dalam 5 detik. <em>Update<\/em> akan dilakukan secara bertahap di artikel\u00a0ini.<\/p>\n<h3>Update<\/h3>\n<ol>\n<li>Menambahkan filter kategori di point 4 dan update progress di Twitter via hashtag di point 10\u200a\u2014\u200a12 Feb\u00a02018<\/li>\n<li>Mengganti Lighthouse audit menggunakan Webpagetest di-<em>point<\/em> 6\u200a\u2014\u200a15 Feb\u00a02018<\/li>\n<li>Menambahkan topic di Github repo untuk membuat list di halaman Github topic di-point 11.\u200a\u2014\u200a15 Feb\u00a02018<\/li>\n<li>Menambahkan <em>URL form submission<\/em> dan menghilangkan score pada submission. Score akan dihitung automatis dengan tes Lighthouse yang tersentralisasi.\u200a\u2014\u200a6 Mar\u00a02018<\/li>\n<\/ol>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=70bb7431741d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">Tantangan Web Developer Untuk Membuat Aplikasi Web Bisa Digunakan Kurang Dari 5 Detik<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Ada banyak jalan menuju Roma, sama dengan ada banyak cara membuat sebuah aplikasi web dan banyak teknik untuk mengoptimalkan sebuah aplikasi web. Cara membuat saat ini sudah cukup banyak tutorialnya, tapi bagaimana dengan teknik mengoptimalkannya?<\/p>\n<p>Tantangan ini ingin mengajak teman-teman web developer Indonesia untuk mencoba membuat sebuah aplikasi RSS reader sederhana dengan goal membuat time to interactive dibawah 5 detik di kondisi jaringan 3G yang lambat dan <em>mobile phone<\/em> dengan spesifikasi menengah rata-rata.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/939\/1*DAksMcGmL2voVF39xrACQA.png\"><\/figure><p>Sebagai gambaran teknis untuk bisa mencapai 5 detik sendiri sebenarnya di kondisi jaringan 3G yang lambat (diasumsikan di 400kbps) maka kita sebenarnya cuma punya waktu sekitar <strong>3,4 detik<\/strong>. Karena sekitar <strong>1,6 detik<\/strong> itu sudah terpakai untuk waktu pemrosesan request lewat jaringan seperti DNS <em>query<\/em>, TCP <em>handshake<\/em>, atau HTTPS <em>handshake<\/em>. Dan dengan perhitungan 3,4 detik dengan kondisi jaringan 400ms <em>round trip<\/em> atau kecepatan 400kbps, maka kita hanya punya <strong>budget ukuran file aplikasi kita sekitar 170KB<\/strong>. Kalau tidak terkompresi dengan GZIP mungkin sekitar\u00a0800KB.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/941\/1*-B9IoqO-bUh_1arH1iG0-A.png\"><figcaption>Time to interactive budget<\/figcaption><\/figure><p>Nah terinpirasi dari tantangan yang sebelumnya sudah ada di luar seperti di <a href=\"https:\/\/hnpwa.com\/\">Hackernews PWA<\/a> ini. Maka kita ingin mencoba membuat tantangan untuk teman-teman web developer Indonesia. Bagaimana bisa membuat sebuah aplikasi web sederhana yang bisa digunakan dalam waktu 5 detik. Nah aturan tantangannya kurang lebih sebagai\u00a0berikut:<\/p>\n<ol>\n<li>Membuat sebuah aplikasi <em>content reader<\/em> dengan menggunakan <a href=\"https:\/\/medium.com\/feed\/wwwid\"><em>feed<\/em> publication WWWID<\/a> ini yang sudah diubah menjadi JSON sehingga bisa dikonsumsi langsung. Silakan menggunakan URL berikut untuk mengakses <em>feed<\/em> JSON.<br><a href=\"https:\/\/api.rss2json.com\/v1\/api.json?rss_url=https%3A%2F%2Fmedium.com%2Ffeed%2Fwwwid\">https:\/\/api.rss2json.com\/v1\/api.json?rss_url=https%3A%2F%2Fmedium.com%2Ffeed%2Fwwwid<\/a>\n<\/li>\n<li>Bebas menggunakan <em>library<\/em> atau <em>framework<\/em> apapun selama bisa diakses melalui <em>browser<\/em> modern seperti Chrome, Firefox, Safari, Opera,\u00a0dll.<\/li>\n<li>Aplikasi content reader ini cukup memiliki 2 halaman, yaitu halaman home dengan daftar <em>latest feed <\/em>di mana pada daftar konten cukup memunculkan\u00a0:<br>* judul artikel<br>* nama penulis<br>* <em>thumbnail<\/em> artikel<br>* satu paragraf artikel.<br>* tanggal artikel di-<em>publish<br><\/em>Dan halaman konten detail di mana sama seperti daftar konten namun memunculkan konten artikel keseluruhan, bukan hanya 1 paragraf.<\/li>\n<li>Feed bisa di-<em>filter<\/em> menggunakan kategori, di mana kategori ini bisa diambil dari field <em>categories<\/em> di tiap konten. <em>Feed filter <\/em>harus punya <em>unique<\/em> URL sehingga kita bisa mengakses konten terkait kategori tersebut langsung via URL misalnya <a href=\"https:\/\/my-reader.app\/cat\/pwa\">https:\/\/my-reader.app\/cat\/pwa<\/a> yang otomatis menampilkan konten PWA\u00a0saja.<\/li>\n<li>Bisa mencapai skor Lighthouse untuk PWA dan Performance diatas\u00a090.<\/li>\n<li>Melakukan <em>testing<\/em> menggunakan <a href=\"https:\/\/www.webpagetest.org\/easy\">Webpagetest mode yang easy<\/a> dan mengaktifkan Lighthouse audit pada saat melakukan test.<\/li>\n<li>Menuliskan bagaimana aplikasi web tersebut dikembangkan dan teknik optimasi yang digunakan seperti apa untuk mencapai skor Lighthouse tersebut.<\/li>\n<li>Bergabung di <a href=\"https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA\">group Telegram<\/a> untuk tanya jawab dan update lebih lanjut. Bergabung di <a href=\"https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA\">https:\/\/t.me\/joinchat\/AZxMcA3CBroTKVFIQpV8JA<\/a>\n<\/li>\n<li>Mendaftarkan aplikasi web tersebut di <a href=\"https:\/\/goo.gl\/forms\/tBfRLWgDXmIvTvr43\"><strong><em>form<\/em> <em>submission<\/em><\/strong><\/a><em> <\/em>dengan mencantumkan URL web app, Github repo URL, dan Medium article\u00a0URL.<\/li>\n<li>Update progress di Twitter dengan hashtag <a href=\"https:\/\/mobile.twitter.com\/search?q=%23WWWIDChallenge\">#WWWIDChallenge<\/a>\n<\/li>\n<li>\n<a href=\"https:\/\/help.github.com\/articles\/classifying-your-repository-with-topics\/\">Menambahkan topic<\/a> wwwid dan wwwidchallenge di Github repo agar muncul <a href=\"https:\/\/github.com\/topics\/wwwid\">di daftar repo para peserta tantangan<\/a>.<\/li>\n<\/ol>\n<p>Tantangan ini hanya sekedar untuk pembelajaran, bukan untuk berkompetisi. Dengan demikian kita bisa melihat bagaimana di setiap <em>framework\/library<\/em> mengoptimasi sebuah aplikasi agar dapat ditampilkan dalam 5 detik. <em>Update<\/em> akan dilakukan secara bertahap di artikel\u00a0ini.<\/p>\n<h3>Update<\/h3>\n<ol>\n<li>Menambahkan filter kategori di point 4 dan update progress di Twitter via hashtag di point 10\u200a\u2014\u200a12 Feb\u00a02018<\/li>\n<li>Mengganti Lighthouse audit menggunakan Webpagetest di-<em>point<\/em> 6\u200a\u2014\u200a15 Feb\u00a02018<\/li>\n<li>Menambahkan topic di Github repo untuk membuat list di halaman Github topic di-point 11.\u200a\u2014\u200a15 Feb\u00a02018<\/li>\n<li>Menambahkan <em>URL form submission<\/em> dan menghilangkan score pada submission. Score akan dihitung automatis dengan tes Lighthouse yang tersentralisasi.\u200a\u2014\u200a6 Mar\u00a02018<\/li>\n<\/ol>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=70bb7431741d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/tantangan-web-developer-untuk-membuat-aplikasi-web-bisa-digunakan-kurang-dari-5-detik-70bb7431741d\">Tantangan Web Developer Untuk Membuat Aplikasi Web Bisa Digunakan Kurang Dari 5 Detik<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["web-performance","progressive-web-app","challenge"]},{"title":"10 Tips Untuk Menjadi Seorang Developer Yang Lebih Baik","pubDate":"2018-02-09 02:30:21","link":"https:\/\/medium.com\/wwwid\/10-tips-untuk-menjadi-seorang-developer-yang-lebih-baik-c9e6e448372d?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/c9e6e448372d","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/320\/1*WeRE9pubIcxke6nAyJNt8Q.png","description":"\n<p>Dalam 6 tahun terakhir saya bekerja sebagai <a href=\"https:\/\/medium.com\/google-developers\/the-core-competencies-of-developer-relations-f3e1c04c0f5b\"><em>developer relations<\/em><\/a>, yaitu membangun jaringan dengan para developer serta mendukung mereka untuk dapat memberikan impact ke para pengguna karya mereka. Di mulai dari <a href=\"https:\/\/www.crunchbase.com\/organization\/blaast\">Blaast<\/a> yang akhirnya dibeli oleh Facebook, lalu <a href=\"https:\/\/github.com\/pemiluAPI\/\">API Pemilu<\/a>, <a href=\"https:\/\/asiafoundation.github.io\/\">The Asia Foundation<\/a>, dan sekarang\u00a0<a href=\"http:\/\/developers.google.com\/web\/\">Google<\/a>.<\/p>\n<p>Perjalanan selama lebih dari 10 tahun di dunia web memberikan banyak ilmu bagaimana sebenarnya kita bisa menjadi seorang developer yang lebih baik. Dan pengalaman itulah yang saya coba bagikan di artikel ini untuk bisa mendorong lebih banyak developers yang bisa lebih baik lagi. Ini dia 10 tips agar bisa menjadi developer yang lebih\u00a0baik.<\/p>\n<h3>1. Temukan <em>role model<\/em> atau\u00a0mentormu<\/h3>\n<p>Role model merupakan langkah awal yang utama karena ada panutan yang kalian akan mudah kalian ikuti. Kalian bisa menanyakan langsung misalnya kalian stuck atau bingung memilih jalan dalam karir kalian. Apalagi dengan adanya Twitter dan social media lainnya, siapa saja bisa kalian jadikan <em>role\u00a0model.<\/em><\/p>\n<h3>2. Selalu mencoba untuk menyelesaikan masalahmu sendiri terlebih\u00a0dahulu.<\/h3>\n<p>Developer yang baik adalah penyelesai masalah yang handal. Dengan berusaha melatih diri kita menyelesaikan sesuatu tanpa banyak bertanya maka kita akan mengasah logika kita untuk menemukan jawaban atas masalah yang ada. Setelah mencoba berbagai cara dan tetap tidak bisa menjawab masalah yang ada maka kita bisa mencoba menanyakan ke orang lain. Tapi usahakan bukan menanyakan solusinya apa, tapi bagaimana cara orang tersebut menemukan solusi tersebut. Ingat, minta pancing untuk mandiri, bukan minta ikan untuk makan\u00a0sekali.<\/p>\n<h3>3. Bisa bertanya dengan\u00a0baik<\/h3>\n<p>Banyak developer senior yang kesal dengan para junior yang bertanya tanpa etika, inginnya menerima jawaban instant tanpa ingin mencari tahu sendiri terlebih dahulu sehingga kebanyakan jawaban yang diterima adalah RTFM! Sama dengan nomor 2 di atas, kalau kita tidak mencari terlebih dahulu maka kita tidak akan tidak akan terbiasa menyelesaikan masalah. Mental akan terbangun untuk disuapi, bukan\u00a0mandiri.<\/p>\n<h3>4. Selalu update dengan tren dan perkembangan di\u00a0industri<\/h3>\n<p>Perkembangan teknologi sangatlah cepat, tanpa memiliki kebiasaan membaca tiap hari akan perkembangan teknologi maka developer akan ketinggalan. Belum lagi cakupan teknologi sangatlah luas, di web saja kita harus paham teknologi di backend, front end, database, dan bagian lainnya. Tanpa bisa memahami apa yang terjadi di bidang-bidang tersebut maka akan susah kita mengadaptasikan dengan perubahan permintaan industri. Jadi janganlah sering-sering <em>stalking<\/em> mantan tiap hari, mending coba <em>subscribe newsletter<\/em> seperti <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> biar bisa jadi developer <em>trend\u00a0setter<\/em>.<\/p>\n<h3>5. Selalu bereksperimen dengan tools dan teknologi baru<\/h3>\n<p>Hampir tiap hari adalah tool, framework, atau library yang dirilis apalagi di <a href=\"https:\/\/stateofjs.com\/\">dunia JavaScript<\/a>. Jangan cuma sekedar pakai, tapi coba cari tahu kenapa alat-alat tersebut diperlukan, bagaimana cara kerjanya, dan coba bereksperimen untuk menggunakannya sehingga bisa tahu kekurangan dan kelebihannya. Lalu cobalah dokumentasikan apa yang kalian eksperimenkan, yang bisa dengan menulisnya.<\/p>\n<h3>6. Selalu berbagi apa yang kamu kerjakan dan\u00a0pelajari<\/h3>\n<p>Developer Indonesia banyak yang jagoan, sayang terlalu sibuk dengan pekerjaan mereka dan lupa berbagi. Begitu membutuhkan developer baru mengeluhkan susahnya menemukan developer tapi tidak pernah melakukan apapun untuk berkontribusi. Berbagi sama dengan belajar, saya sendiri justru berusaha mendokumentasikan apa yang saya pelajari agar bisa lebih paham lagi, dan tentu bisa berguna bagi yang lain. Cobalah dengan menulis pengalaman kalian dalam mempelajari sesuatu di dunia programming.<\/p>\n<h3>7. Belajar mengkomunikasikan idemu dengan verbal atau\u00a0tulisan.<\/h3>\n<p>Kebanyakan developer adalah <em>introvert<\/em> dan kurang mampu mengkomunikasikan pemikiran mereka dengan baik. Hasilnya kebanyakan developer cuma bisa membuat aplikasi berdasarkan spesifikasi tanpa berkontribusi dalam perancangan sebuah produk. Bahkan dulu saya dalam merekrut developer di agency, kebanyakan saya lihat bagaimana mereka berkomunikasi di email. Istilahnya, rekrutlah developer yang bisa menuliskan pemikiran mereka karena komunikasi adalah poin utama kerja sama dan kolaborasi dalam team. Komunikasi adalah tentang empati, kepercayaan diri, dan logika. Makin sering kita berkomunikasi, maka 3 hal tersebut akan dibangun.<\/p>\n<h3>8. Belajar kemampuan lain yang mendukung kemampuan utamamu<\/h3>\n<p>Terkadang developer lupa bahwa menjadi developer yang baik bukan cuma modal ahli dalam programming. Contoh no-7 di atas menunjukkan pentingnya kemampuan komunikasi. Apalagi kalau kalian ingin menjadi makers seperti <a href=\"https:\/\/levels.io\/\">Pieter Levels<\/a>, seorang developer yang membuat sendiri produk-produknya dan cukup sukses di kalangan digital nomad. Kalian akan butuh kemampuan lain seperti <em>design<\/em>, <em>copywriting<\/em>, dan <em>user research<\/em>. Tentu tidak semua perlu kalian kerjakan sendiri, tapi dengan tahu standar yang baik di bidang tersebut kalian bisa membuat produk yang lebih\u00a0baik.<\/p>\n<h3>9. Menjadi mentor untuk developer lain<\/h3>\n<p>Mentor merupakan cara kita untuk belajar menyelesaikan masalah yang belum menjadi masalah kita atau bahkan meningkatkan kemampuan kita terkait masalah yang kita bantu. Saya sendiri menjadi mentor di <a href=\"https:\/\/developers.google.com\/programs\/launchpad\/accelerator\/\">Launchpad Accelerator<\/a> justru membantu saya memahami lebih dalam bagaimana para startup menyelesaikan masalah-masalah di negara berkembang seperti India, Mexico, Brazil, dan Nigeria. Kita bisa lebih cepat belajar dengan membantu orang lain menyelesaikan masalah\u00a0mereka.<\/p>\n<h3>10. Work life\u00a0balance<\/h3>\n<p>Banyak orang bilang, kalau kita suka pekerjaan kita maka kita tidak masalah bila kita terus bekerja tanpa melakukan refreshing. Bahkan weekend diisi dengan side project adalah <em>refreshing<\/em>. Tapi otak kita perlu dilatih karena kalau <a href=\"https:\/\/bebrainfit.com\/brain-exercises\/\">terlalu sering dipakai untuk hal yang sama maka hal itu menjadi rutinitas yang cuma mengunakan sedikit kinerja otak kita<\/a>. Lama-lama otak menjadi tumpul dan tidak bekerja\u00a0optimal.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/320\/1*WeRE9pubIcxke6nAyJNt8Q.png\"><figcaption>Rutinitas sama vs aktivitas baru<\/figcaption><\/figure><p>Kegiatan refreshing bukan harus santai, tapi bisa dilatih dengan olahraga atau kegiatan aktif lainnya. Selain bisa membantu badan kita tetap bugar agar bisa tetap produktif, tentu otak akan diasah dengan beragam kegiatan\u00a0berbeda.<\/p>\n<h3>Penutup<\/h3>\n<p>Nah, silakan mencoba 10 tips di-atas. Indonesia lagi kekurangan developer, sehingga diprediksi kita <a href=\"https:\/\/www.techinasia.com\/indonesia-wont-see-new-unicorns-investors\">tidak akan punya <em>unicorn<\/em> baru dalam waktu dekat<\/a> karena masalah kekurangan developer ini. Padahal tahun 2<a href=\"https:\/\/news.okezone.com\/read\/2016\/12\/21\/65\/1572265\/lulusan-teknik-didominasi-sarjana-informatika\">016 lulusan sarjana informatika adalah 41.023 orang<\/a>, tapi saya tidak yakin semuanya siap untuk menjadi developer yang diterima industri. Karena itu jangan cuma bisa jadi developer yang sekedar tahu bahasa pemrograman, tapi cobalah jadi developer yang lebih baik dan bisa membuat sesuatu yang berguna bagi orang\u00a0lain.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9e6e448372d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/10-tips-untuk-menjadi-seorang-developer-yang-lebih-baik-c9e6e448372d\">10 Tips Untuk Menjadi Seorang Developer Yang Lebih Baik<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Dalam 6 tahun terakhir saya bekerja sebagai <a href=\"https:\/\/medium.com\/google-developers\/the-core-competencies-of-developer-relations-f3e1c04c0f5b\"><em>developer relations<\/em><\/a>, yaitu membangun jaringan dengan para developer serta mendukung mereka untuk dapat memberikan impact ke para pengguna karya mereka. Di mulai dari <a href=\"https:\/\/www.crunchbase.com\/organization\/blaast\">Blaast<\/a> yang akhirnya dibeli oleh Facebook, lalu <a href=\"https:\/\/github.com\/pemiluAPI\/\">API Pemilu<\/a>, <a href=\"https:\/\/asiafoundation.github.io\/\">The Asia Foundation<\/a>, dan sekarang\u00a0<a href=\"http:\/\/developers.google.com\/web\/\">Google<\/a>.<\/p>\n<p>Perjalanan selama lebih dari 10 tahun di dunia web memberikan banyak ilmu bagaimana sebenarnya kita bisa menjadi seorang developer yang lebih baik. Dan pengalaman itulah yang saya coba bagikan di artikel ini untuk bisa mendorong lebih banyak developers yang bisa lebih baik lagi. Ini dia 10 tips agar bisa menjadi developer yang lebih\u00a0baik.<\/p>\n<h3>1. Temukan <em>role model<\/em> atau\u00a0mentormu<\/h3>\n<p>Role model merupakan langkah awal yang utama karena ada panutan yang kalian akan mudah kalian ikuti. Kalian bisa menanyakan langsung misalnya kalian stuck atau bingung memilih jalan dalam karir kalian. Apalagi dengan adanya Twitter dan social media lainnya, siapa saja bisa kalian jadikan <em>role\u00a0model.<\/em><\/p>\n<h3>2. Selalu mencoba untuk menyelesaikan masalahmu sendiri terlebih\u00a0dahulu.<\/h3>\n<p>Developer yang baik adalah penyelesai masalah yang handal. Dengan berusaha melatih diri kita menyelesaikan sesuatu tanpa banyak bertanya maka kita akan mengasah logika kita untuk menemukan jawaban atas masalah yang ada. Setelah mencoba berbagai cara dan tetap tidak bisa menjawab masalah yang ada maka kita bisa mencoba menanyakan ke orang lain. Tapi usahakan bukan menanyakan solusinya apa, tapi bagaimana cara orang tersebut menemukan solusi tersebut. Ingat, minta pancing untuk mandiri, bukan minta ikan untuk makan\u00a0sekali.<\/p>\n<h3>3. Bisa bertanya dengan\u00a0baik<\/h3>\n<p>Banyak developer senior yang kesal dengan para junior yang bertanya tanpa etika, inginnya menerima jawaban instant tanpa ingin mencari tahu sendiri terlebih dahulu sehingga kebanyakan jawaban yang diterima adalah RTFM! Sama dengan nomor 2 di atas, kalau kita tidak mencari terlebih dahulu maka kita tidak akan tidak akan terbiasa menyelesaikan masalah. Mental akan terbangun untuk disuapi, bukan\u00a0mandiri.<\/p>\n<h3>4. Selalu update dengan tren dan perkembangan di\u00a0industri<\/h3>\n<p>Perkembangan teknologi sangatlah cepat, tanpa memiliki kebiasaan membaca tiap hari akan perkembangan teknologi maka developer akan ketinggalan. Belum lagi cakupan teknologi sangatlah luas, di web saja kita harus paham teknologi di backend, front end, database, dan bagian lainnya. Tanpa bisa memahami apa yang terjadi di bidang-bidang tersebut maka akan susah kita mengadaptasikan dengan perubahan permintaan industri. Jadi janganlah sering-sering <em>stalking<\/em> mantan tiap hari, mending coba <em>subscribe newsletter<\/em> seperti <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> biar bisa jadi developer <em>trend\u00a0setter<\/em>.<\/p>\n<h3>5. Selalu bereksperimen dengan tools dan teknologi baru<\/h3>\n<p>Hampir tiap hari adalah tool, framework, atau library yang dirilis apalagi di <a href=\"https:\/\/stateofjs.com\/\">dunia JavaScript<\/a>. Jangan cuma sekedar pakai, tapi coba cari tahu kenapa alat-alat tersebut diperlukan, bagaimana cara kerjanya, dan coba bereksperimen untuk menggunakannya sehingga bisa tahu kekurangan dan kelebihannya. Lalu cobalah dokumentasikan apa yang kalian eksperimenkan, yang bisa dengan menulisnya.<\/p>\n<h3>6. Selalu berbagi apa yang kamu kerjakan dan\u00a0pelajari<\/h3>\n<p>Developer Indonesia banyak yang jagoan, sayang terlalu sibuk dengan pekerjaan mereka dan lupa berbagi. Begitu membutuhkan developer baru mengeluhkan susahnya menemukan developer tapi tidak pernah melakukan apapun untuk berkontribusi. Berbagi sama dengan belajar, saya sendiri justru berusaha mendokumentasikan apa yang saya pelajari agar bisa lebih paham lagi, dan tentu bisa berguna bagi yang lain. Cobalah dengan menulis pengalaman kalian dalam mempelajari sesuatu di dunia programming.<\/p>\n<h3>7. Belajar mengkomunikasikan idemu dengan verbal atau\u00a0tulisan.<\/h3>\n<p>Kebanyakan developer adalah <em>introvert<\/em> dan kurang mampu mengkomunikasikan pemikiran mereka dengan baik. Hasilnya kebanyakan developer cuma bisa membuat aplikasi berdasarkan spesifikasi tanpa berkontribusi dalam perancangan sebuah produk. Bahkan dulu saya dalam merekrut developer di agency, kebanyakan saya lihat bagaimana mereka berkomunikasi di email. Istilahnya, rekrutlah developer yang bisa menuliskan pemikiran mereka karena komunikasi adalah poin utama kerja sama dan kolaborasi dalam team. Komunikasi adalah tentang empati, kepercayaan diri, dan logika. Makin sering kita berkomunikasi, maka 3 hal tersebut akan dibangun.<\/p>\n<h3>8. Belajar kemampuan lain yang mendukung kemampuan utamamu<\/h3>\n<p>Terkadang developer lupa bahwa menjadi developer yang baik bukan cuma modal ahli dalam programming. Contoh no-7 di atas menunjukkan pentingnya kemampuan komunikasi. Apalagi kalau kalian ingin menjadi makers seperti <a href=\"https:\/\/levels.io\/\">Pieter Levels<\/a>, seorang developer yang membuat sendiri produk-produknya dan cukup sukses di kalangan digital nomad. Kalian akan butuh kemampuan lain seperti <em>design<\/em>, <em>copywriting<\/em>, dan <em>user research<\/em>. Tentu tidak semua perlu kalian kerjakan sendiri, tapi dengan tahu standar yang baik di bidang tersebut kalian bisa membuat produk yang lebih\u00a0baik.<\/p>\n<h3>9. Menjadi mentor untuk developer lain<\/h3>\n<p>Mentor merupakan cara kita untuk belajar menyelesaikan masalah yang belum menjadi masalah kita atau bahkan meningkatkan kemampuan kita terkait masalah yang kita bantu. Saya sendiri menjadi mentor di <a href=\"https:\/\/developers.google.com\/programs\/launchpad\/accelerator\/\">Launchpad Accelerator<\/a> justru membantu saya memahami lebih dalam bagaimana para startup menyelesaikan masalah-masalah di negara berkembang seperti India, Mexico, Brazil, dan Nigeria. Kita bisa lebih cepat belajar dengan membantu orang lain menyelesaikan masalah\u00a0mereka.<\/p>\n<h3>10. Work life\u00a0balance<\/h3>\n<p>Banyak orang bilang, kalau kita suka pekerjaan kita maka kita tidak masalah bila kita terus bekerja tanpa melakukan refreshing. Bahkan weekend diisi dengan side project adalah <em>refreshing<\/em>. Tapi otak kita perlu dilatih karena kalau <a href=\"https:\/\/bebrainfit.com\/brain-exercises\/\">terlalu sering dipakai untuk hal yang sama maka hal itu menjadi rutinitas yang cuma mengunakan sedikit kinerja otak kita<\/a>. Lama-lama otak menjadi tumpul dan tidak bekerja\u00a0optimal.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/320\/1*WeRE9pubIcxke6nAyJNt8Q.png\"><figcaption>Rutinitas sama vs aktivitas baru<\/figcaption><\/figure><p>Kegiatan refreshing bukan harus santai, tapi bisa dilatih dengan olahraga atau kegiatan aktif lainnya. Selain bisa membantu badan kita tetap bugar agar bisa tetap produktif, tentu otak akan diasah dengan beragam kegiatan\u00a0berbeda.<\/p>\n<h3>Penutup<\/h3>\n<p>Nah, silakan mencoba 10 tips di-atas. Indonesia lagi kekurangan developer, sehingga diprediksi kita <a href=\"https:\/\/www.techinasia.com\/indonesia-wont-see-new-unicorns-investors\">tidak akan punya <em>unicorn<\/em> baru dalam waktu dekat<\/a> karena masalah kekurangan developer ini. Padahal tahun 2<a href=\"https:\/\/news.okezone.com\/read\/2016\/12\/21\/65\/1572265\/lulusan-teknik-didominasi-sarjana-informatika\">016 lulusan sarjana informatika adalah 41.023 orang<\/a>, tapi saya tidak yakin semuanya siap untuk menjadi developer yang diterima industri. Karena itu jangan cuma bisa jadi developer yang sekedar tahu bahasa pemrograman, tapi cobalah jadi developer yang lebih baik dan bisa membuat sesuatu yang berguna bagi orang\u00a0lain.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9e6e448372d\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/10-tips-untuk-menjadi-seorang-developer-yang-lebih-baik-c9e6e448372d\">10 Tips Untuk Menjadi Seorang Developer Yang Lebih Baik<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["tips","life","web-developer"]},{"title":"Yang Web Developers Harus Tahu #5","pubDate":"2018-02-05 02:51:56","link":"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-5-24b0024c2371?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/24b0024c2371","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/500\/1*bEgkgubD1oviPPXhjkbGOw.gif","description":"\n<p>Who love Monday?? Nah sudah memasuki Februari dan saatnya untuk update terbaru untuk kalian biar tetap tahu perkembangan di dunia web. Kali ini bagian artikel menarik kami ubah menjadi konten menarik karena beberapa konten bukan cuma berupa tulisan tapi juga berupa video. Dan ini dia yang kalian harus tahu sebagai web developers. Have an amazing week\u00a0guys!<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/webmasters.googleblog.com\/2018\/01\/using-page-speed-in-mobile-search.html\"><strong>Ranking Google Search akan terpengaruh oleh page speed<\/strong><\/a><strong><br><\/strong>Sebelumnya page speed sudah berpengaruh pada ranking hasil pencarian Google Search, tapi hanya di desktop. Berhubung <a href=\"https:\/\/www.thinkwithgoogle.com\/marketing-resources\/data-measurement\/mobile-page-speed-new-industry-benchmarks\/\">data menunjukkan bahwa kecepatan sebuah halaman adalah hal yang penting<\/a>, maka per Juli 2018 search ranking pada mobile juga akan dipengaruhi oleh page speed. Jadi segera tingkatkan halaman website kalian di\u00a0mobile.<\/p>\n<p><a href=\"https:\/\/hacks.mozilla.org\/2018\/01\/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler\/\"><strong>WebAssembly code dikompilasi lebih cepat dengan streaming compiler di\u00a0Firefox<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/500\/1*bEgkgubD1oviPPXhjkbGOw.gif\"><figcaption>Streaming compiler WebAssembly<\/figcaption><\/figure><p>JavaScript merupakan salah satu faktor yang menggunakan sumber daya paling besar dalam menampilkan sebuah halaman <em>website<\/em>. Salah satu kelemahannya adalah JavaScript baru bisa di-<em>parsing<\/em> dan dikompilasi setelah file selesai di-<em>download<\/em>. Dengan<em> streaming compiler<\/em> pada WebAssembly, kode akan siap dijalankan karena kode sudah mulai dikompilasi dari <em>byte<\/em> pertama diterima tanpa harus menunggu<em> byte codes <\/em>selesai di-<em>download<\/em>.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/crux\"><strong>Chrome user experieces report sudah tersedia per\u00a0negara<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*MgTp_M6YEIcDvCdy5NzrQg.png\"><figcaption>Query yang menampilkan data per\u00a0negara<\/figcaption><\/figure><p>Laporan yang sebelumnya dirilis dan <a href=\"https:\/\/bigquery.cloud.google.com\/dataset\/chrome-ux-report:all\">bisa digunakan langsung di Big Query<\/a> sekarang sudah dilengkapi dengan laporan per negara termasuk Indonesia. Ini memudahkan untuk melakukan query dan melihat insight spesifik pada suatu\u00a0negara.<\/p>\n<p><a href=\"https:\/\/hacks.mozilla.org\/2018\/01\/firefox-58-the-quantum-era-continues\/\"><strong>Progressive Web App di Firefox 58 Quantum<\/strong><\/a><strong><br><\/strong>Add to homescreen yang merupakan salah satu fitur utama dari aplikasi Progressive Web App(PWA) diluncurkan di Firefox 58 bersamaan dengan deretan fitur lainnya termasuk streaming compiler di WebAssembly yang sudah dibahas di\u00a0atas.<\/p>\n<h3><strong>Konten Menarik<\/strong><\/h3>\n<p><a href=\"https:\/\/medium.com\/@tjmonsi\/journey-to-create-a-web-app-to-load-under-50kb-on-first-load-creating-element-lite-bcc1452a8c6a\"><strong>Journey to create a web-app to load under\u00a050KB<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*ifYmmcfoA5eUO9vPonZ_ag.jpeg\"><\/figure><p>Tantangan web developer saat ini adalah bagaimana membuat website bisa <a href=\"https:\/\/medium.com\/dev-channel\/the-cost-of-javascript-84009f51e99e\">tampil dan interaktif dalam 3 detik<\/a>. Dan cara ini tidak mudah karena untuk bisa mencapai itu batas maksimal ukuran website adalah 50KB. Dan untuk lebih baik lagi, <a href=\"https:\/\/www.thinkwithgoogle.com\/data-gallery\/detail\/mobile-site-abandonment-three-second-load\/\">harus bisa interaktif dalam 3 detik<\/a> dimana batas maksimal ukuran website kita adalah 50KB. Di artikel ini, <a href=\"https:\/\/medium.com\/@tjmonsi\">Toni<\/a> <a href=\"https:\/\/developers.google.com\/experts\/\">Google Developer Expert<\/a> of Web Technology mencoba menunjukkan bagaimana dia mencoba membuat website dengan ukuran kurang dari\u00a050KB.<\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=uccDswZXUPk\"><strong>Payment Request API di Microsoft Edge<\/strong><\/a><strong><br><\/strong>Payment Request API bisa menjadi solusi untuk kompleksitas flow pembayaran di mobile. Di video ini, Microsoft Edge menunjukkan bagaimana kalian bisa menggunakan Payment Request API di website kalian untuk mengumpulkan informasi yang dibutuhkan dalam proses checkout seperti data pengiriman dan pembayaran.<\/p>\n<p><a href=\"https:\/\/paul.kinlan.me\/challenges-for-web-developers\/\"><strong>Tantangan buat para web developers<\/strong><\/a><strong><br><\/strong>Paul Kinlan, lead dari Chrome dan Web Developer Relation team di Google menuliskan tantangan apa saja yang dialami oleh para web developers di seluruh dunia. Kalau kalian web developers, mungkin frustasi yang kalian rasakan bukan cuma ada di kalian, tapi juga di web developers lainnya. Kalian tidak sendirian.<\/p>\n<p><a href=\"https:\/\/medium.com\/dev-channel\/polymer-2-and-googlebot-2ad50c5727dd\"><strong>Search Engine Optimization di Single Page Application(SPA)<\/strong><\/a><strong><br><\/strong>Salah satu kekhawatiran developer pada saat ingin mengimplementasikan PWA dengan app shell architecture adalah apakah tetap bisa di-index oleh search engine. Artikel ini membahas bagaimana mengoptimalkan SPA kalian terutama di Polymer agar tetap bisa di-index oleh Google Search. Walaupun pembahasan dengan Polymer tapi secara teknis tetap bisa diaplikasikan di <em>framework<\/em> lainnya.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/devtools-without-devtools\"><strong>Menggunakan fungsi Chrome Dev Tool secara programmatically<\/strong><\/a><strong><br><\/strong>Masih terkait Puppeteers, artikel ini menunjukkan bagaimana kalian bisa menggunakan fungsi di <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/\">Chrome Dev Tool <\/a>dan membuat script yang bisa dirancang untuk menganalisa web kalian. Kalian bisa menghitung ukuran file setiap jenis assets seperti CSS, gambar, dan JavaScript, atau menganalisa CSS dan JavaScript yang tidak terpakai di sebuah halaman, dan <a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\/tree\/master\/examples\/\">fungsi\u00a0lainnya<\/a>.<\/p>\n<h3><strong>Tools, Frameworks, dan Libraries<\/strong><\/h3>\n<p><a href=\"https:\/\/medium.com\/webpack\/webpack-2017-a-year-in-review-9f4a760fddd4\"><strong>Webpack 2017, a year in review<\/strong><\/a><strong><br><\/strong>Tahun 2017 adalah tahun di mana Webpack menjalani transisi besar menjadi produk jangka panjang. Di tulisan ini <a href=\"https:\/\/medium.com\/@TheLarkInn\">Sean Larkin<\/a> mencoba menuliskan apa saja yang terjadi dalam setahun terakhir selama 2017. Dimulai dari pembentukan team contributor, hingga perjalanannya mencapai versi\u00a04.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/tools\/puppeteer\/\"><strong>Puppeteers rilis versi 1.0<\/strong><\/a><strong><br><\/strong>Puppeteers adalah NodeJS library yang digunakan untuk mengontrol Chrome Headless. Dan mereka baru saja merilis major version 1.0. Dengan Puppeteers 1.0 ini kalian bisa mengotomasi apa yg ingin kalian lakukan pada halaman web. Misalnya <em>screenshot<\/em>, <em>generate PDF<\/em>, <em>automation testing<\/em>, atau <em>prerender<\/em> untuk\u00a0SPA.<\/p>\n<p><a href=\"https:\/\/medium.com\/@devongovett\/parcel-v1-5-0-released-source-maps-webassembly-rust-and-more-3a6385e43b95\"><strong>Parcel rilis versi 1.5<\/strong><\/a><strong><br><\/strong>Parcel, salah satu <em>web application bundler<\/em> yang fokus pada kemudahan tanpa konfigurasi merilis versi terbaru 1.5 setelah 2 bulan baru merilis versi 1.0. Selain mudah, proses <em>bundle<\/em>-nya juga diklaim sangat cepat. Pada rilis ini salah satu yang patut diperhatikan adalah dukungan pada WebAssembly yang memungkinkan untuk menggunakan script Rust langsung di aplikasi.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=24b0024c2371\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-5-24b0024c2371\">Yang Web Developers Harus Tahu #5<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Who love Monday?? Nah sudah memasuki Februari dan saatnya untuk update terbaru untuk kalian biar tetap tahu perkembangan di dunia web. Kali ini bagian artikel menarik kami ubah menjadi konten menarik karena beberapa konten bukan cuma berupa tulisan tapi juga berupa video. Dan ini dia yang kalian harus tahu sebagai web developers. Have an amazing week\u00a0guys!<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/webmasters.googleblog.com\/2018\/01\/using-page-speed-in-mobile-search.html\"><strong>Ranking Google Search akan terpengaruh oleh page speed<\/strong><\/a><strong><br><\/strong>Sebelumnya page speed sudah berpengaruh pada ranking hasil pencarian Google Search, tapi hanya di desktop. Berhubung <a href=\"https:\/\/www.thinkwithgoogle.com\/marketing-resources\/data-measurement\/mobile-page-speed-new-industry-benchmarks\/\">data menunjukkan bahwa kecepatan sebuah halaman adalah hal yang penting<\/a>, maka per Juli 2018 search ranking pada mobile juga akan dipengaruhi oleh page speed. Jadi segera tingkatkan halaman website kalian di\u00a0mobile.<\/p>\n<p><a href=\"https:\/\/hacks.mozilla.org\/2018\/01\/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler\/\"><strong>WebAssembly code dikompilasi lebih cepat dengan streaming compiler di\u00a0Firefox<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/500\/1*bEgkgubD1oviPPXhjkbGOw.gif\"><figcaption>Streaming compiler WebAssembly<\/figcaption><\/figure><p>JavaScript merupakan salah satu faktor yang menggunakan sumber daya paling besar dalam menampilkan sebuah halaman <em>website<\/em>. Salah satu kelemahannya adalah JavaScript baru bisa di-<em>parsing<\/em> dan dikompilasi setelah file selesai di-<em>download<\/em>. Dengan<em> streaming compiler<\/em> pada WebAssembly, kode akan siap dijalankan karena kode sudah mulai dikompilasi dari <em>byte<\/em> pertama diterima tanpa harus menunggu<em> byte codes <\/em>selesai di-<em>download<\/em>.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/crux\"><strong>Chrome user experieces report sudah tersedia per\u00a0negara<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*MgTp_M6YEIcDvCdy5NzrQg.png\"><figcaption>Query yang menampilkan data per\u00a0negara<\/figcaption><\/figure><p>Laporan yang sebelumnya dirilis dan <a href=\"https:\/\/bigquery.cloud.google.com\/dataset\/chrome-ux-report:all\">bisa digunakan langsung di Big Query<\/a> sekarang sudah dilengkapi dengan laporan per negara termasuk Indonesia. Ini memudahkan untuk melakukan query dan melihat insight spesifik pada suatu\u00a0negara.<\/p>\n<p><a href=\"https:\/\/hacks.mozilla.org\/2018\/01\/firefox-58-the-quantum-era-continues\/\"><strong>Progressive Web App di Firefox 58 Quantum<\/strong><\/a><strong><br><\/strong>Add to homescreen yang merupakan salah satu fitur utama dari aplikasi Progressive Web App(PWA) diluncurkan di Firefox 58 bersamaan dengan deretan fitur lainnya termasuk streaming compiler di WebAssembly yang sudah dibahas di\u00a0atas.<\/p>\n<h3><strong>Konten Menarik<\/strong><\/h3>\n<p><a href=\"https:\/\/medium.com\/@tjmonsi\/journey-to-create-a-web-app-to-load-under-50kb-on-first-load-creating-element-lite-bcc1452a8c6a\"><strong>Journey to create a web-app to load under\u00a050KB<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*ifYmmcfoA5eUO9vPonZ_ag.jpeg\"><\/figure><p>Tantangan web developer saat ini adalah bagaimana membuat website bisa <a href=\"https:\/\/medium.com\/dev-channel\/the-cost-of-javascript-84009f51e99e\">tampil dan interaktif dalam 3 detik<\/a>. Dan cara ini tidak mudah karena untuk bisa mencapai itu batas maksimal ukuran website adalah 50KB. Dan untuk lebih baik lagi, <a href=\"https:\/\/www.thinkwithgoogle.com\/data-gallery\/detail\/mobile-site-abandonment-three-second-load\/\">harus bisa interaktif dalam 3 detik<\/a> dimana batas maksimal ukuran website kita adalah 50KB. Di artikel ini, <a href=\"https:\/\/medium.com\/@tjmonsi\">Toni<\/a> <a href=\"https:\/\/developers.google.com\/experts\/\">Google Developer Expert<\/a> of Web Technology mencoba menunjukkan bagaimana dia mencoba membuat website dengan ukuran kurang dari\u00a050KB.<\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=uccDswZXUPk\"><strong>Payment Request API di Microsoft Edge<\/strong><\/a><strong><br><\/strong>Payment Request API bisa menjadi solusi untuk kompleksitas flow pembayaran di mobile. Di video ini, Microsoft Edge menunjukkan bagaimana kalian bisa menggunakan Payment Request API di website kalian untuk mengumpulkan informasi yang dibutuhkan dalam proses checkout seperti data pengiriman dan pembayaran.<\/p>\n<p><a href=\"https:\/\/paul.kinlan.me\/challenges-for-web-developers\/\"><strong>Tantangan buat para web developers<\/strong><\/a><strong><br><\/strong>Paul Kinlan, lead dari Chrome dan Web Developer Relation team di Google menuliskan tantangan apa saja yang dialami oleh para web developers di seluruh dunia. Kalau kalian web developers, mungkin frustasi yang kalian rasakan bukan cuma ada di kalian, tapi juga di web developers lainnya. Kalian tidak sendirian.<\/p>\n<p><a href=\"https:\/\/medium.com\/dev-channel\/polymer-2-and-googlebot-2ad50c5727dd\"><strong>Search Engine Optimization di Single Page Application(SPA)<\/strong><\/a><strong><br><\/strong>Salah satu kekhawatiran developer pada saat ingin mengimplementasikan PWA dengan app shell architecture adalah apakah tetap bisa di-index oleh search engine. Artikel ini membahas bagaimana mengoptimalkan SPA kalian terutama di Polymer agar tetap bisa di-index oleh Google Search. Walaupun pembahasan dengan Polymer tapi secara teknis tetap bisa diaplikasikan di <em>framework<\/em> lainnya.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/devtools-without-devtools\"><strong>Menggunakan fungsi Chrome Dev Tool secara programmatically<\/strong><\/a><strong><br><\/strong>Masih terkait Puppeteers, artikel ini menunjukkan bagaimana kalian bisa menggunakan fungsi di <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/\">Chrome Dev Tool <\/a>dan membuat script yang bisa dirancang untuk menganalisa web kalian. Kalian bisa menghitung ukuran file setiap jenis assets seperti CSS, gambar, dan JavaScript, atau menganalisa CSS dan JavaScript yang tidak terpakai di sebuah halaman, dan <a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\/tree\/master\/examples\/\">fungsi\u00a0lainnya<\/a>.<\/p>\n<h3><strong>Tools, Frameworks, dan Libraries<\/strong><\/h3>\n<p><a href=\"https:\/\/medium.com\/webpack\/webpack-2017-a-year-in-review-9f4a760fddd4\"><strong>Webpack 2017, a year in review<\/strong><\/a><strong><br><\/strong>Tahun 2017 adalah tahun di mana Webpack menjalani transisi besar menjadi produk jangka panjang. Di tulisan ini <a href=\"https:\/\/medium.com\/@TheLarkInn\">Sean Larkin<\/a> mencoba menuliskan apa saja yang terjadi dalam setahun terakhir selama 2017. Dimulai dari pembentukan team contributor, hingga perjalanannya mencapai versi\u00a04.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/tools\/puppeteer\/\"><strong>Puppeteers rilis versi 1.0<\/strong><\/a><strong><br><\/strong>Puppeteers adalah NodeJS library yang digunakan untuk mengontrol Chrome Headless. Dan mereka baru saja merilis major version 1.0. Dengan Puppeteers 1.0 ini kalian bisa mengotomasi apa yg ingin kalian lakukan pada halaman web. Misalnya <em>screenshot<\/em>, <em>generate PDF<\/em>, <em>automation testing<\/em>, atau <em>prerender<\/em> untuk\u00a0SPA.<\/p>\n<p><a href=\"https:\/\/medium.com\/@devongovett\/parcel-v1-5-0-released-source-maps-webassembly-rust-and-more-3a6385e43b95\"><strong>Parcel rilis versi 1.5<\/strong><\/a><strong><br><\/strong>Parcel, salah satu <em>web application bundler<\/em> yang fokus pada kemudahan tanpa konfigurasi merilis versi terbaru 1.5 setelah 2 bulan baru merilis versi 1.0. Selain mudah, proses <em>bundle<\/em>-nya juga diklaim sangat cepat. Pada rilis ini salah satu yang patut diperhatikan adalah dukungan pada WebAssembly yang memungkinkan untuk menggunakan script Rust langsung di aplikasi.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=24b0024c2371\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-5-24b0024c2371\">Yang Web Developers Harus Tahu #5<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["front-end-development","progressive-web-app","web-development"]},{"title":"Progressive Web Apps, mulai dari mana?","pubDate":"2018-02-02 05:17:43","link":"https:\/\/medium.com\/wwwid\/progressive-web-apps-mulai-dari-mana-bd223a941782?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/bd223a941782","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/816\/1*l-A9d_a86O8KjMbxIDOTZA.png","description":"\n<p>Banyak orang salah kaprah pada saat berbicara tentang <a href=\"https:\/\/developers.google.com\/web\/progressive-web-apps\/\"><em>Progressive Web App<\/em>(PWA)<\/a>, bahwa untuk bisa memiliki PWA harus <em>Single Page Application<\/em>(SPA), atau harus menggunakan <em>framework<\/em> modern seperti React, Angular, Polymer, dan lainnya. Sehingga banyak developer yang merasa bahwa mereka tidak bisa menerapkan PWA karena mereka masih menggunakan <em>server rendered framework<\/em> seperti PHP atau Ruby Framework. Padahal berbicara PWA, tentunya yang utama adalah kata <em>progressive<\/em> di mana maksud sebenarnya adalah peningkatan pengalaman user secara progresif atau bertahap. Nah pertanyaannya mulai dari mana sih kalau ingin membuat sebuah aplikasi PWA? Tulisan ini semoga bisa membantu kalian untuk menjawabnya.<\/p>\n<h3><strong>Keamanan HTTPS Adalah Pondasi\u00a0Dasar<\/strong><\/h3>\n<p>Keamanan di web merupakan isu yang cukup besar karena banyaknya <em>phising<\/em>, <em>content hijacking<\/em>, dan isu keamanan lainnya. Sebagian besar isu ini mengeksploitasi kemudahan web yang sangat mudah diakses. Hanya dengan URL, kita bisa mengakses tanpa perlu meng-<em>install<\/em> apapun di perangkat kita. Dengan itu, <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/encrypt-in-transit\/why-https\">penggunaan HTTPS adalah wajib di sisi <em>web server<\/em><\/a>, karena hampir semua fungsi dari PWA cuma bisa berjalan di HTTPS. Dan sekarang dengan adanya <a href=\"https:\/\/letsencrypt.org\/\"><em>SSL certificate<\/em> gratis<\/a>, maka tidak ada alasan lagi untuk tidak menggunakan HTTPS di web kalian. Tentu ini juga panggilan buat para provider hosting untuk bisa menyediakan SSL gratis di semua server mereka. Tanpa dukungan pihak <em>hosting provider<\/em> maka web yang aman akan tetap menjadi\u00a0isu.<\/p>\n<h3>Meningkatkan pengalaman pengguna secara\u00a0bertahap<\/h3>\n<p>Setelah memiliki pondasi, baru kita bisa memulai untuk meningkatkan pengalaman pengguna web kita secara bertahap. Dan tentu tidak semua harus didukung, tapi kita perlu memilih berdasarkan jenis aplikasi web kita. PWA bukanlah teknologi yang semua komponen harus dibuat. Komponen PWA yang ada di bawah ini bersifat modular, jadi bisa saja beberapa komponen tidak digunakan, atau cuma mengimplementasi 2 atau 3 komponen saja. Dan berikut adalah tahapan yang kalian bisa\u00a0coba.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/816\/1*l-A9d_a86O8KjMbxIDOTZA.png\"><figcaption>Skema komponen fungsi\u00a0PWA<\/figcaption><\/figure><h3>1. Siap untuk\u00a0PWA<\/h3>\n<p>Yang pertama adalah apakah website kalian sudah siap untuk PWA. Karena sebelum kita mencoba menerapkan fungsi PWA maka website kita harus siap untuk dioptimasi. Dua checklist yang saya rekomendasikan untuk memastikan website kalian siap untuk PWA\u00a0adalah:<\/p>\n<ol>\n<li>\n<a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/encrypt-in-transit\/enable-https\">Menggunakan protokol HTTPS<\/a>. Tanpa HTTPS maka hampir sebagian besar komponen PWA tidak akan bisa diimplementasikan.<\/li>\n<li>Menggunakan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/architecture\/app-shell\"><em>App Shell Architecture<\/em><\/a>, ini merupakan hal yang paling susah karena terkadang memerlukan penulisan ulang aplikasi. Tapi menurut saya, PWA tetap masih bisa diimplementasi walaupun ada beberapa hal yang terbatasi tanpa <em>App Shell Architecture<\/em> ini.<\/li>\n<\/ol>\n<h3>2. Tingkatkan kecepatan loading dan\u00a0respon<\/h3>\n<p>Kecepatan <em>loading<\/em> dan respon menurut saya adalah yang paling penting dan harus menjadi langkah pertama untuk optimalisasi PWA. Tanpa kecepatan maka pengguna akan meninggalkan <em>website<\/em> kalian tanpa mencoba pengalaman lainnya. Bahkan <strong>data yang ada menyebutkan <\/strong><a href=\"https:\/\/www.doubleclickbygoogle.com\/articles\/mobile-speed-matters\/\"><strong>3 detik website tidak tampil, 53% pengguna akan pergi<\/strong><\/a>. Buat apa membuat sesuatu sedemikian baik tapi akhirnya orang tidak memakai karena terlalu\u00a0lambat.<\/p>\n<p>Dengan <em>loading<\/em> yang cepat maka pengguna akan dapat merasakan <em>value<\/em> yang kalian coba tawarkan dan selanjutnya baru menentukan apakah kalian bisa membuat mereka tinggal atau\u00a0pergi.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/644\/1*-eFQOPTVr3cR7wJXSSdGWQ.png\"><figcaption>Source: DoubleClick\u200a\u2014\u200aThe need for mobile speed, September 2016<\/figcaption><\/figure><p>Untuk meningkatkan kecepatan <em>website<\/em>, kalian bisa melihat <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/rail\">beberapa petunjuk di\u00a0sini<\/a>.<\/p>\n<h3>3. Memasang <em>service worker<\/em> untuk dukungan <em>offline<\/em> dan peningkatan kecepatan serta pengalaman extra<\/h3>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/primers\/service-workers\/\"><em>Service worker<\/em><\/a> adalah komponen yang bisa diprogram dan berada di antara <em>browser<\/em> dan <em>web server<\/em>. Dengan memasang <em>service worker<\/em> maka kita bisa melakukan cache pada resources yang dibutuhkan dan juga memungkinkan aplikasi kita tetap bisa diakses dengan baik walaupun di jaringan yang tidak stabil atau <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/instant-and-offline\/offline-cookbook\/\">bahkan\u00a0<em>offline<\/em><\/a>.<\/p>\n<p>Tujuannya adalah untuk kondisi pengguna yang sudah merasakan <em>value<\/em> yang kalian tawarkan dan mereka merasa ingin terus menggunakannya. Maka untuk pengguna seperti ini, mereka harus bisa merasakan pengalaman dari value yang ditawarkan lebih baik lagi. Seperti aplikasi tetap responsif di kondisi\u00a0apapun.<\/p>\n<p><em>Service worker<\/em> juga memungkinkan kita untuk melakukan fungsi ekstra seperti <a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/12\/background-sync\"><em>background sync<\/em><\/a><em> <\/em>di mana aplikasi bisa melakukan sinkronisasi data pada saat kondisi kembali online walaupun website tidak sedang dibuka, dan <a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/03\/push-notifications-on-the-open-web\"><em>push notification<\/em><\/a><em> <\/em>untuk mengirimkan notifikasi kepada pengguna atau menjalankan fungsi tertentu di aplikasi.<\/p>\n<h3>4. Push notification untuk mengingatkan value dan membawa pengguna\u00a0kembali<\/h3>\n<p>Setelah pengguna betah dengan <em>value<\/em> yang ditawarkan, maka selanjutnya adalah bagaimana untuk mengingatkan mereka akan <em>value<\/em> kalian. Salah satu caranya tentu dengan mengingatkan mereka. Dan media yang bisa dicoba selain <em>email<\/em> adalah dengan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/push-notifications\/\"><em>push notification<\/em><\/a>.<\/p>\n<p>Tapi yang ini kalian harus berhati-hati jangan sampai terlalu sering mengingatkan dan akhirnya akan terganggu oleh notifikasi yang terlalu sering. Pastikan notifikasi yang kalian kirimkan memiliki kriteria agar pengguna tidak menganggap notifikasi kalian sebagai <em>spam<\/em> pengganggu. Karena hasil riset yang ada menunjukkan notifikasi adalah salah satu alasan sebuah aplikasi dihapus. Dan di <em>web<\/em>, bila notifikasi kalian diblok maka kemungkinan besar kalian akan diblok selamanya hingga pengguna mengganti perangkat.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/905\/1*E7LBDjGP8KitbD31FD9KrA.png\"><figcaption>Source: <a href=\"http:\/\/www.uxbooth.com\/articles\/rules-for-creating-perfect-push-notifications\/\">http:\/\/www.uxbooth.com\/articles\/rules-for-creating-perfect-push-notifications\/<\/a><\/figcaption><\/figure><h3>5. Add to homescreen untuk kemudahan akses<\/h3>\n<p>Setelah secara kecepatan akses sudah baik dan value sudah diterima dengan baik, selanjutnya adalah memudahkan pengguna untuk mengakses aplikasi kita semudah memilih <em>icon<\/em> aplikasi di layar <em>smart phone<\/em>. Untuk itu PWA sudah dilengkapi dengan komponen <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/app-install-banners\/\"><em>add to home screen<\/em><\/a> di mana aplikasi <em>web<\/em> kalian akan menawarkan opsi untuk menyimpan icon aplikasi kalian di home screen perangkat mereka.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/597\/1*krd0HBNhJJEcSooQJGZ1CA.gif\"><figcaption>Add to home\u00a0screen<\/figcaption><\/figure><p>Cara agar tawaran ke pengguna bisa muncul adalah kalian harus melengkapi aplikasi kalian dengan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/web-app-manifest\/\"><em>file manifest<\/em><\/a> lengkap dengan <em>icon<\/em> dan <em>meta data<\/em> lainnya. User yang merasakan value dan suka maka akan mencoba menggunakan aplikasi kalian lagi. Dengan memberikan kemudahan pada mereka untuk mengakses aplikasi kalian maka pengalaman pengguna akan lebih\u00a0baik.<\/p>\n<h3>6. Memudahkan pengguna untuk registrasi dan masuk ke website\u00a0kalian<\/h3>\n<p>Membuat user mendaftarkan diri mereka adalah salah satu bagian yang paling susah. Kendala pertama tentu memberikan alasan untuk mendaftarkan diri, kenapa mereka harus mendaftarkan diri mereka. Selanjutnya adalah adalah memudahkan usaha yang diperlukan untuk mendaftar atau masuk ke website\u00a0kalian.<\/p>\n<p>Dengan memudahkan pengguna mendaftar dan masuk ke website kalian maka kalian bisa lebih mudah dalam mempelajari tingkah laku mereka dan bisa mengetahui bagaimana kalian bisa memberikan value yang lebih baik lagi untuk pengguna\u00a0kalian.<\/p>\n<p>Beberapa cara untuk memudahkan pengguna untuk mendaftarkan diri dan masuk ke website kalian adalah <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/credential-management\/\">pengaturan <em>credentials<\/em><\/a>, masuk dengan akun social media seperti Facebook atau Twitter, serta <a href=\"https:\/\/developers.google.com\/identity\/one-tap\/web\/\"><em>Google one-tap sign-up and auto\u00a0sign-in<\/em><\/a>.<\/p>\n<h3>7. Memudahkan proses pembayaran<\/h3>\n<p>Bila kalian adalah startup atau layanan yang memerlukan proses pembayaran, salah satu isu terbesar di <em>mobile<\/em> adalah kompleksitas pembayaran. Banyaknya informasi yang harus dimasukkan dengan layar dan papan ketik terbatas membuat orang kebanyakan jadi malas untuk melanjutkan.<\/p>\n<p>Konversi pembayaran di <em>mobile<\/em> masih di bawah <em>desktop<\/em> padahal dari sisi trafik <em>mobile<\/em> masih lebih besar dari <em>desktop<\/em>. Salah satu yang kalian bisa lakukan implementasi<em> <\/em><a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/06\/checkout-faster-with-autofill\"><em>auto fill checkout form<\/em><\/a> atau <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/payments\/\"><em>Payment Request API<\/em><\/a> untuk memudah pembayaran. Dua cara tersebut mampu mengurangi usaha yang diperlukan oleh pengguna untuk menyelesaikan proses pembayaran.<\/p>\n<h3>Penutup<\/h3>\n<p>Itulah 7 langkah yang kalian bisa coba untuk memberikan pengalaman progresif atau bertahap kepada pengguna kalian di web. Dari 7 langkah tersebut, tahapan 1\u20133 merupakan yang paling prioritas karena bertujuan untuk memberikan kemudahan untuk pengguna bisa mengenal <em>value<\/em> yang kalian tawarkan. Dan tidak harus sekaligus, kalian bisa mengimplementasikan komponen tersebut secara bertahap. Setelah itu kalian bisa melihat tergantung dari kebutuhan pengguna\u00a0kalian.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bd223a941782\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/progressive-web-apps-mulai-dari-mana-bd223a941782\">Progressive Web Apps, mulai dari mana?<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Banyak orang salah kaprah pada saat berbicara tentang <a href=\"https:\/\/developers.google.com\/web\/progressive-web-apps\/\"><em>Progressive Web App<\/em>(PWA)<\/a>, bahwa untuk bisa memiliki PWA harus <em>Single Page Application<\/em>(SPA), atau harus menggunakan <em>framework<\/em> modern seperti React, Angular, Polymer, dan lainnya. Sehingga banyak developer yang merasa bahwa mereka tidak bisa menerapkan PWA karena mereka masih menggunakan <em>server rendered framework<\/em> seperti PHP atau Ruby Framework. Padahal berbicara PWA, tentunya yang utama adalah kata <em>progressive<\/em> di mana maksud sebenarnya adalah peningkatan pengalaman user secara progresif atau bertahap. Nah pertanyaannya mulai dari mana sih kalau ingin membuat sebuah aplikasi PWA? Tulisan ini semoga bisa membantu kalian untuk menjawabnya.<\/p>\n<h3><strong>Keamanan HTTPS Adalah Pondasi\u00a0Dasar<\/strong><\/h3>\n<p>Keamanan di web merupakan isu yang cukup besar karena banyaknya <em>phising<\/em>, <em>content hijacking<\/em>, dan isu keamanan lainnya. Sebagian besar isu ini mengeksploitasi kemudahan web yang sangat mudah diakses. Hanya dengan URL, kita bisa mengakses tanpa perlu meng-<em>install<\/em> apapun di perangkat kita. Dengan itu, <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/encrypt-in-transit\/why-https\">penggunaan HTTPS adalah wajib di sisi <em>web server<\/em><\/a>, karena hampir semua fungsi dari PWA cuma bisa berjalan di HTTPS. Dan sekarang dengan adanya <a href=\"https:\/\/letsencrypt.org\/\"><em>SSL certificate<\/em> gratis<\/a>, maka tidak ada alasan lagi untuk tidak menggunakan HTTPS di web kalian. Tentu ini juga panggilan buat para provider hosting untuk bisa menyediakan SSL gratis di semua server mereka. Tanpa dukungan pihak <em>hosting provider<\/em> maka web yang aman akan tetap menjadi\u00a0isu.<\/p>\n<h3>Meningkatkan pengalaman pengguna secara\u00a0bertahap<\/h3>\n<p>Setelah memiliki pondasi, baru kita bisa memulai untuk meningkatkan pengalaman pengguna web kita secara bertahap. Dan tentu tidak semua harus didukung, tapi kita perlu memilih berdasarkan jenis aplikasi web kita. PWA bukanlah teknologi yang semua komponen harus dibuat. Komponen PWA yang ada di bawah ini bersifat modular, jadi bisa saja beberapa komponen tidak digunakan, atau cuma mengimplementasi 2 atau 3 komponen saja. Dan berikut adalah tahapan yang kalian bisa\u00a0coba.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/816\/1*l-A9d_a86O8KjMbxIDOTZA.png\"><figcaption>Skema komponen fungsi\u00a0PWA<\/figcaption><\/figure><h3>1. Siap untuk\u00a0PWA<\/h3>\n<p>Yang pertama adalah apakah website kalian sudah siap untuk PWA. Karena sebelum kita mencoba menerapkan fungsi PWA maka website kita harus siap untuk dioptimasi. Dua checklist yang saya rekomendasikan untuk memastikan website kalian siap untuk PWA\u00a0adalah:<\/p>\n<ol>\n<li>\n<a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/encrypt-in-transit\/enable-https\">Menggunakan protokol HTTPS<\/a>. Tanpa HTTPS maka hampir sebagian besar komponen PWA tidak akan bisa diimplementasikan.<\/li>\n<li>Menggunakan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/architecture\/app-shell\"><em>App Shell Architecture<\/em><\/a>, ini merupakan hal yang paling susah karena terkadang memerlukan penulisan ulang aplikasi. Tapi menurut saya, PWA tetap masih bisa diimplementasi walaupun ada beberapa hal yang terbatasi tanpa <em>App Shell Architecture<\/em> ini.<\/li>\n<\/ol>\n<h3>2. Tingkatkan kecepatan loading dan\u00a0respon<\/h3>\n<p>Kecepatan <em>loading<\/em> dan respon menurut saya adalah yang paling penting dan harus menjadi langkah pertama untuk optimalisasi PWA. Tanpa kecepatan maka pengguna akan meninggalkan <em>website<\/em> kalian tanpa mencoba pengalaman lainnya. Bahkan <strong>data yang ada menyebutkan <\/strong><a href=\"https:\/\/www.doubleclickbygoogle.com\/articles\/mobile-speed-matters\/\"><strong>3 detik website tidak tampil, 53% pengguna akan pergi<\/strong><\/a>. Buat apa membuat sesuatu sedemikian baik tapi akhirnya orang tidak memakai karena terlalu\u00a0lambat.<\/p>\n<p>Dengan <em>loading<\/em> yang cepat maka pengguna akan dapat merasakan <em>value<\/em> yang kalian coba tawarkan dan selanjutnya baru menentukan apakah kalian bisa membuat mereka tinggal atau\u00a0pergi.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/644\/1*-eFQOPTVr3cR7wJXSSdGWQ.png\"><figcaption>Source: DoubleClick\u200a\u2014\u200aThe need for mobile speed, September 2016<\/figcaption><\/figure><p>Untuk meningkatkan kecepatan <em>website<\/em>, kalian bisa melihat <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/rail\">beberapa petunjuk di\u00a0sini<\/a>.<\/p>\n<h3>3. Memasang <em>service worker<\/em> untuk dukungan <em>offline<\/em> dan peningkatan kecepatan serta pengalaman extra<\/h3>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/primers\/service-workers\/\"><em>Service worker<\/em><\/a> adalah komponen yang bisa diprogram dan berada di antara <em>browser<\/em> dan <em>web server<\/em>. Dengan memasang <em>service worker<\/em> maka kita bisa melakukan cache pada resources yang dibutuhkan dan juga memungkinkan aplikasi kita tetap bisa diakses dengan baik walaupun di jaringan yang tidak stabil atau <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/instant-and-offline\/offline-cookbook\/\">bahkan\u00a0<em>offline<\/em><\/a>.<\/p>\n<p>Tujuannya adalah untuk kondisi pengguna yang sudah merasakan <em>value<\/em> yang kalian tawarkan dan mereka merasa ingin terus menggunakannya. Maka untuk pengguna seperti ini, mereka harus bisa merasakan pengalaman dari value yang ditawarkan lebih baik lagi. Seperti aplikasi tetap responsif di kondisi\u00a0apapun.<\/p>\n<p><em>Service worker<\/em> juga memungkinkan kita untuk melakukan fungsi ekstra seperti <a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/12\/background-sync\"><em>background sync<\/em><\/a><em> <\/em>di mana aplikasi bisa melakukan sinkronisasi data pada saat kondisi kembali online walaupun website tidak sedang dibuka, dan <a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/03\/push-notifications-on-the-open-web\"><em>push notification<\/em><\/a><em> <\/em>untuk mengirimkan notifikasi kepada pengguna atau menjalankan fungsi tertentu di aplikasi.<\/p>\n<h3>4. Push notification untuk mengingatkan value dan membawa pengguna\u00a0kembali<\/h3>\n<p>Setelah pengguna betah dengan <em>value<\/em> yang ditawarkan, maka selanjutnya adalah bagaimana untuk mengingatkan mereka akan <em>value<\/em> kalian. Salah satu caranya tentu dengan mengingatkan mereka. Dan media yang bisa dicoba selain <em>email<\/em> adalah dengan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/push-notifications\/\"><em>push notification<\/em><\/a>.<\/p>\n<p>Tapi yang ini kalian harus berhati-hati jangan sampai terlalu sering mengingatkan dan akhirnya akan terganggu oleh notifikasi yang terlalu sering. Pastikan notifikasi yang kalian kirimkan memiliki kriteria agar pengguna tidak menganggap notifikasi kalian sebagai <em>spam<\/em> pengganggu. Karena hasil riset yang ada menunjukkan notifikasi adalah salah satu alasan sebuah aplikasi dihapus. Dan di <em>web<\/em>, bila notifikasi kalian diblok maka kemungkinan besar kalian akan diblok selamanya hingga pengguna mengganti perangkat.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/905\/1*E7LBDjGP8KitbD31FD9KrA.png\"><figcaption>Source: <a href=\"http:\/\/www.uxbooth.com\/articles\/rules-for-creating-perfect-push-notifications\/\">http:\/\/www.uxbooth.com\/articles\/rules-for-creating-perfect-push-notifications\/<\/a><\/figcaption><\/figure><h3>5. Add to homescreen untuk kemudahan akses<\/h3>\n<p>Setelah secara kecepatan akses sudah baik dan value sudah diterima dengan baik, selanjutnya adalah memudahkan pengguna untuk mengakses aplikasi kita semudah memilih <em>icon<\/em> aplikasi di layar <em>smart phone<\/em>. Untuk itu PWA sudah dilengkapi dengan komponen <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/app-install-banners\/\"><em>add to home screen<\/em><\/a> di mana aplikasi <em>web<\/em> kalian akan menawarkan opsi untuk menyimpan icon aplikasi kalian di home screen perangkat mereka.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/597\/1*krd0HBNhJJEcSooQJGZ1CA.gif\"><figcaption>Add to home\u00a0screen<\/figcaption><\/figure><p>Cara agar tawaran ke pengguna bisa muncul adalah kalian harus melengkapi aplikasi kalian dengan <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/web-app-manifest\/\"><em>file manifest<\/em><\/a> lengkap dengan <em>icon<\/em> dan <em>meta data<\/em> lainnya. User yang merasakan value dan suka maka akan mencoba menggunakan aplikasi kalian lagi. Dengan memberikan kemudahan pada mereka untuk mengakses aplikasi kalian maka pengalaman pengguna akan lebih\u00a0baik.<\/p>\n<h3>6. Memudahkan pengguna untuk registrasi dan masuk ke website\u00a0kalian<\/h3>\n<p>Membuat user mendaftarkan diri mereka adalah salah satu bagian yang paling susah. Kendala pertama tentu memberikan alasan untuk mendaftarkan diri, kenapa mereka harus mendaftarkan diri mereka. Selanjutnya adalah adalah memudahkan usaha yang diperlukan untuk mendaftar atau masuk ke website\u00a0kalian.<\/p>\n<p>Dengan memudahkan pengguna mendaftar dan masuk ke website kalian maka kalian bisa lebih mudah dalam mempelajari tingkah laku mereka dan bisa mengetahui bagaimana kalian bisa memberikan value yang lebih baik lagi untuk pengguna\u00a0kalian.<\/p>\n<p>Beberapa cara untuk memudahkan pengguna untuk mendaftarkan diri dan masuk ke website kalian adalah <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/security\/credential-management\/\">pengaturan <em>credentials<\/em><\/a>, masuk dengan akun social media seperti Facebook atau Twitter, serta <a href=\"https:\/\/developers.google.com\/identity\/one-tap\/web\/\"><em>Google one-tap sign-up and auto\u00a0sign-in<\/em><\/a>.<\/p>\n<h3>7. Memudahkan proses pembayaran<\/h3>\n<p>Bila kalian adalah startup atau layanan yang memerlukan proses pembayaran, salah satu isu terbesar di <em>mobile<\/em> adalah kompleksitas pembayaran. Banyaknya informasi yang harus dimasukkan dengan layar dan papan ketik terbatas membuat orang kebanyakan jadi malas untuk melanjutkan.<\/p>\n<p>Konversi pembayaran di <em>mobile<\/em> masih di bawah <em>desktop<\/em> padahal dari sisi trafik <em>mobile<\/em> masih lebih besar dari <em>desktop<\/em>. Salah satu yang kalian bisa lakukan implementasi<em> <\/em><a href=\"https:\/\/developers.google.com\/web\/updates\/2015\/06\/checkout-faster-with-autofill\"><em>auto fill checkout form<\/em><\/a> atau <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/payments\/\"><em>Payment Request API<\/em><\/a> untuk memudah pembayaran. Dua cara tersebut mampu mengurangi usaha yang diperlukan oleh pengguna untuk menyelesaikan proses pembayaran.<\/p>\n<h3>Penutup<\/h3>\n<p>Itulah 7 langkah yang kalian bisa coba untuk memberikan pengalaman progresif atau bertahap kepada pengguna kalian di web. Dari 7 langkah tersebut, tahapan 1\u20133 merupakan yang paling prioritas karena bertujuan untuk memberikan kemudahan untuk pengguna bisa mengenal <em>value<\/em> yang kalian tawarkan. Dan tidak harus sekaligus, kalian bisa mengimplementasikan komponen tersebut secara bertahap. Setelah itu kalian bisa melihat tergantung dari kebutuhan pengguna\u00a0kalian.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bd223a941782\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/progressive-web-apps-mulai-dari-mana-bd223a941782\">Progressive Web Apps, mulai dari mana?<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["product-development","progressive-web-app","web-development"]},{"title":"Studi Kasus Accessibility \u2014 Web Form","pubDate":"2018-01-24 14:57:26","link":"https:\/\/medium.com\/wwwid\/studi-kasus-accessibility-web-form-cd20369c475b?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/cd20369c475b","author":"Satya Kresna Adi Pratama","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/509\/1*Do-kpLI6fS-gIgacfstQXg.png","description":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/509\/1*Do-kpLI6fS-gIgacfstQXg.png\"><\/figure><p><a href=\"https:\/\/medium.com\/wwwid\/perkenalan-accessibility-c9d893318567\">Di artikel sebelumnya<\/a>, kita telah belajar bahwa Accessibility adalah sebuah hal yang wajib ada dan memudahkan para pengguna disabilitas untuk mengakses produk kita seperti website layaknya orang normal. Pada bagian ini, saya akan menjelaskan studi kasus Accesibility pada sebuah form website dan menggunakan Lighthouse pada browser Chrome versi 63.0.3239.132 sebagai\u00a0audit.<\/p>\n<p>Form web yang kita rancang sebagai\u00a0berikut:<\/p>\n<ol>\n<li>\n<strong>Nama dan username<\/strong> menggunakan &lt;input type=\"text\"&gt;<\/li>\n<li>\n<strong>Alamat<\/strong> menggunakan &lt;textarea&gt;<\/li>\n<li>\n<strong>Email<\/strong> menggunakan &lt;input type=\"email\"&gt;<\/li>\n<li>\n<strong>Password<\/strong> menggunakan &lt;input type=\"password\"&gt; dan menambahkan atribut\u00a0<strong>required<\/strong>\n<\/li>\n<li>\n<strong>Jenis kelamin<\/strong> menggunakan &lt;input type=\"radio\"&gt;<\/li>\n<li>\n<strong>Hobi<\/strong> menggunakan &lt;input type=\"checkbox\"&gt;<\/li>\n<li>\n<strong>Asal kota<\/strong> menggunakan &lt;select&gt;<\/li>\n<\/ol>\n<p>Saya telah membuatkan file <strong>no-a11y-form.html<\/strong> dan sebagai developer yang baik cukup copy paste source code di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/3acca741e4207fc0d743188fd3ce5676\/href\">https:\/\/medium.com\/media\/3acca741e4207fc0d743188fd3ce5676\/href<\/a><p>Selanjutnya, bukalah <strong>no-a11y-form.html<\/strong> di browser Chrome dan gunakan kursor anda untuk melakukan percobaan dengan meng-klik setiap label di form tersebut. Apakah kursor keyboard langsung mengarah pada setiap field? Jika tidak, maka hal ini perlu kita perbaiki bersama. Mengapa? <strong><em>Dalam dunia Accessibility, pengguna disabilitas sangat bergantung dengan interaksi keyboard, mouse dan screen\u00a0reader.<\/em><\/strong><\/p>\n<p>Kita akan gunakan salah satu screen reader bernama Voice Over yang tertanam dalam Mac OS untuk menguji <strong>no-a11y-form.html<\/strong>. Umumnya, ketika ingin berpindah dari satu tempat ke tempat lain dalam satu halaman, pengguna disabilitas menggunakan tombol <strong>TAB<\/strong> keyboard. Hasil pengujiannya seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/ebccd036304f1f1ed0a536555f2b282e\/href\">https:\/\/medium.com\/media\/ebccd036304f1f1ed0a536555f2b282e\/href<\/a><p>Kita bisa lihat bahwa label <strong>nama, email, username<\/strong>, dsb tidak terbaca oleh screen reader dan hal tersebut akan membuat pengguna disabilitas bingung serta kemungkinan paling buruk adalah meninggalkan halaman web. Tentu hal tersebut tidak kita inginkan!<\/p>\n<p>Sebelum kita mulai memperbaiki, kita lakukan audit Lighthouse pada browser Chrome. Lighthouse telah tertanam secara default di versi Chrome 60 ke atas dan jika browser anda berada di bawah versi tersebut, silahkan menggunakan extension Lighthouse yang disediakan oleh Chrome. Klik kanan pada halaman no-a11y-form.html =&gt; pilih inspect atau inspect element =&gt; pilih tab Audits =&gt; pilih perform an audit =&gt; centang Accessibility. Biarkan Lighthouse melakukan inspeksi dan hasilnya seperti di\u00a0bawah.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*BTXjbTBoXGZMJVso.png\"><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*2o-A-pRPQZF7xaWS.png\"><figcaption>Audit no-a11y form tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p>Dari hasil audit Accessibility pada form no-a11y sebesar 97\/100. Dan jika anda perhatikan, ada satu isu yang perlu diperhatikan yakni <strong>Form elements do not have associated labels.<\/strong> Maksudnya adalah setiap elemen form yang kita buat harus berasosiasi atau terhubung dengan label yang kita buat agar dijabarkan dengan benar oleh teknologi pembantu seperti screen\u00a0reader.<\/p>\n<p>Terdapat dua cara untuk memperbaikinya. Cara pertama saya berikan nama <strong>form-a11y-alternative-1.html<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/ac35620245d38a34fc436f2efad679ca\/href\">https:\/\/medium.com\/media\/ac35620245d38a34fc436f2efad679ca\/href<\/a><p>Jika anda perhatikan source code di atas dengan seksama maka <strong>&lt;label&gt;<\/strong> telah berasosiasi dengan elemen form yang kita buat. Hal ini bisa ditunjukkan pada sintaks di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/e8c4a8097c419b81961aa87e776cd3b7\/href\">https:\/\/medium.com\/media\/e8c4a8097c419b81961aa87e776cd3b7\/href<\/a><p>Kita hanya perlu menyisipkan atribut <strong>for<\/strong> pada label dan atribut <strong>id<\/strong> pada elemen form yang kita asosiasikan serta <strong>value dari kedua atribut harus\u00a0sama<\/strong>.<\/p>\n<p>Kita akan lakukan lagi pengujian menggunakan Voice Over dan hasilnya seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/3317f83a77887a44a4ee665c7d9c0990\/href\">https:\/\/medium.com\/media\/3317f83a77887a44a4ee665c7d9c0990\/href<\/a><p>Kita bisa lihat bahwa label <strong>nama, email, username<\/strong>, dsb sudah terbaca oleh screen reader. Berikutnya kita audit <strong>form-a11y-alternative-1.html<\/strong> dengan Lighthouse.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*7dMzQ0oOw6tXCUFa.png\"><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*faabpGLQH4iS6aim.png\"><figcaption>Audit form-a11y-alternative-1.html tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p>Cara kedua saya berikan nama <strong>form-a11y-alternative-2.html<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/de2b11fa85b1c8fd1290e07f04bfcca3\/href\">https:\/\/medium.com\/media\/de2b11fa85b1c8fd1290e07f04bfcca3\/href<\/a><p>Jika anda perhatikan source code di atas dengan seksama pada field email, <strong>&lt;label&gt;<\/strong> membungkus elemen form email yang kita buat seperti sintaks di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/fc3731af922542e668b9c2adb4b25700\/href\">https:\/\/medium.com\/media\/fc3731af922542e668b9c2adb4b25700\/href<\/a><p>Kita lakukan pengujian dengan Voice Over seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/f9a8025714b47c0648d054b95e66b5ea\/href\">https:\/\/medium.com\/media\/f9a8025714b47c0648d054b95e66b5ea\/href<\/a><p>Jika anda menggunakan screen reader seperti <a href=\"https:\/\/www.apple.com\/voiceover\/info\/guide\/_1121.html\">Voice Over<\/a> (Mac) atau <a href=\"https:\/\/www.nvaccess.org\/\">NVDA<\/a> (Windows) dan menggunakan tombol <strong>TAB <\/strong>di keyboard akan berbunyi \u201cHobi Ngoding\u201d, \u201cHobi Tidur\u201d, \u201cHobi Makan\u201d, \u201cJenis kelamin Perempuan\u201d, \u201cJenis kelamin laki-laki\u201d. Berikutnya kita lakukan audit pada <strong>form-a11y-alternative-2.html<\/strong> menggunakan Lighthouse, hasilnya seperti sama seperti <strong>form-a11y-alternative-1.html<\/strong>.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*W9_XHZ7Tt-u_jgmR.png\"><figcaption>Audit form-a11y-alternative-2.html tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p><strong>Bonus<\/strong><\/p>\n<p>Jika anda memperhatikan source code pada <strong>form-a11y-alternative2.html<\/strong> maka terdapat sebuah atribut bernama <strong>aria-labelledby<\/strong> pada field <strong>Hobi dan Jenis kelamin<\/strong>.<strong> <\/strong>Hal ini akan dibahas pada artikel selanjutnya.<\/p>\n<p><strong>Kesimpulan<\/strong><\/p>\n<ol>\n<li>Setiap form elemen harus berasosiasi dengan\u00a0label.<\/li>\n<li>Terdapat dua cara untuk melakukan hal tersebut. Pertama menambahkan atribut <strong>&lt;for&gt;<\/strong> pada label dan atribut <strong>&lt;id&gt;<\/strong> pada elemen form. Kedua, menambahkan membungkus form elemen dengan<strong> <\/strong><strong>&lt;label&gt;<\/strong>. Kedua cara tersebut dapat digunakan sesuai dengan kenyamanan anda dalam menciptakan Accessibility yang baik bagi pengguna disabilitas.<\/li>\n<\/ol>\n<p>Terima kasih telah membaca artikel ini, semoga bermanfaat, sebarkan dan jangan ragu bila ingin bertanya atau menyampaikan kritik dan saran di kolom komentar. \ud83d\ude09<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd20369c475b\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/studi-kasus-accessibility-web-form-cd20369c475b\">Studi Kasus Accessibility \u2014 Web Form<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/509\/1*Do-kpLI6fS-gIgacfstQXg.png\"><\/figure><p><a href=\"https:\/\/medium.com\/wwwid\/perkenalan-accessibility-c9d893318567\">Di artikel sebelumnya<\/a>, kita telah belajar bahwa Accessibility adalah sebuah hal yang wajib ada dan memudahkan para pengguna disabilitas untuk mengakses produk kita seperti website layaknya orang normal. Pada bagian ini, saya akan menjelaskan studi kasus Accesibility pada sebuah form website dan menggunakan Lighthouse pada browser Chrome versi 63.0.3239.132 sebagai\u00a0audit.<\/p>\n<p>Form web yang kita rancang sebagai\u00a0berikut:<\/p>\n<ol>\n<li>\n<strong>Nama dan username<\/strong> menggunakan &lt;input type=\"text\"&gt;<\/li>\n<li>\n<strong>Alamat<\/strong> menggunakan &lt;textarea&gt;<\/li>\n<li>\n<strong>Email<\/strong> menggunakan &lt;input type=\"email\"&gt;<\/li>\n<li>\n<strong>Password<\/strong> menggunakan &lt;input type=\"password\"&gt; dan menambahkan atribut\u00a0<strong>required<\/strong>\n<\/li>\n<li>\n<strong>Jenis kelamin<\/strong> menggunakan &lt;input type=\"radio\"&gt;<\/li>\n<li>\n<strong>Hobi<\/strong> menggunakan &lt;input type=\"checkbox\"&gt;<\/li>\n<li>\n<strong>Asal kota<\/strong> menggunakan &lt;select&gt;<\/li>\n<\/ol>\n<p>Saya telah membuatkan file <strong>no-a11y-form.html<\/strong> dan sebagai developer yang baik cukup copy paste source code di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/3acca741e4207fc0d743188fd3ce5676\/href\">https:\/\/medium.com\/media\/3acca741e4207fc0d743188fd3ce5676\/href<\/a><p>Selanjutnya, bukalah <strong>no-a11y-form.html<\/strong> di browser Chrome dan gunakan kursor anda untuk melakukan percobaan dengan meng-klik setiap label di form tersebut. Apakah kursor keyboard langsung mengarah pada setiap field? Jika tidak, maka hal ini perlu kita perbaiki bersama. Mengapa? <strong><em>Dalam dunia Accessibility, pengguna disabilitas sangat bergantung dengan interaksi keyboard, mouse dan screen\u00a0reader.<\/em><\/strong><\/p>\n<p>Kita akan gunakan salah satu screen reader bernama Voice Over yang tertanam dalam Mac OS untuk menguji <strong>no-a11y-form.html<\/strong>. Umumnya, ketika ingin berpindah dari satu tempat ke tempat lain dalam satu halaman, pengguna disabilitas menggunakan tombol <strong>TAB<\/strong> keyboard. Hasil pengujiannya seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/ebccd036304f1f1ed0a536555f2b282e\/href\">https:\/\/medium.com\/media\/ebccd036304f1f1ed0a536555f2b282e\/href<\/a><p>Kita bisa lihat bahwa label <strong>nama, email, username<\/strong>, dsb tidak terbaca oleh screen reader dan hal tersebut akan membuat pengguna disabilitas bingung serta kemungkinan paling buruk adalah meninggalkan halaman web. Tentu hal tersebut tidak kita inginkan!<\/p>\n<p>Sebelum kita mulai memperbaiki, kita lakukan audit Lighthouse pada browser Chrome. Lighthouse telah tertanam secara default di versi Chrome 60 ke atas dan jika browser anda berada di bawah versi tersebut, silahkan menggunakan extension Lighthouse yang disediakan oleh Chrome. Klik kanan pada halaman no-a11y-form.html =&gt; pilih inspect atau inspect element =&gt; pilih tab Audits =&gt; pilih perform an audit =&gt; centang Accessibility. Biarkan Lighthouse melakukan inspeksi dan hasilnya seperti di\u00a0bawah.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*BTXjbTBoXGZMJVso.png\"><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*2o-A-pRPQZF7xaWS.png\"><figcaption>Audit no-a11y form tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p>Dari hasil audit Accessibility pada form no-a11y sebesar 97\/100. Dan jika anda perhatikan, ada satu isu yang perlu diperhatikan yakni <strong>Form elements do not have associated labels.<\/strong> Maksudnya adalah setiap elemen form yang kita buat harus berasosiasi atau terhubung dengan label yang kita buat agar dijabarkan dengan benar oleh teknologi pembantu seperti screen\u00a0reader.<\/p>\n<p>Terdapat dua cara untuk memperbaikinya. Cara pertama saya berikan nama <strong>form-a11y-alternative-1.html<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/ac35620245d38a34fc436f2efad679ca\/href\">https:\/\/medium.com\/media\/ac35620245d38a34fc436f2efad679ca\/href<\/a><p>Jika anda perhatikan source code di atas dengan seksama maka <strong>&lt;label&gt;<\/strong> telah berasosiasi dengan elemen form yang kita buat. Hal ini bisa ditunjukkan pada sintaks di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/e8c4a8097c419b81961aa87e776cd3b7\/href\">https:\/\/medium.com\/media\/e8c4a8097c419b81961aa87e776cd3b7\/href<\/a><p>Kita hanya perlu menyisipkan atribut <strong>for<\/strong> pada label dan atribut <strong>id<\/strong> pada elemen form yang kita asosiasikan serta <strong>value dari kedua atribut harus\u00a0sama<\/strong>.<\/p>\n<p>Kita akan lakukan lagi pengujian menggunakan Voice Over dan hasilnya seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/3317f83a77887a44a4ee665c7d9c0990\/href\">https:\/\/medium.com\/media\/3317f83a77887a44a4ee665c7d9c0990\/href<\/a><p>Kita bisa lihat bahwa label <strong>nama, email, username<\/strong>, dsb sudah terbaca oleh screen reader. Berikutnya kita audit <strong>form-a11y-alternative-1.html<\/strong> dengan Lighthouse.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*7dMzQ0oOw6tXCUFa.png\"><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*faabpGLQH4iS6aim.png\"><figcaption>Audit form-a11y-alternative-1.html tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p>Cara kedua saya berikan nama <strong>form-a11y-alternative-2.html<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/de2b11fa85b1c8fd1290e07f04bfcca3\/href\">https:\/\/medium.com\/media\/de2b11fa85b1c8fd1290e07f04bfcca3\/href<\/a><p>Jika anda perhatikan source code di atas dengan seksama pada field email, <strong>&lt;label&gt;<\/strong> membungkus elemen form email yang kita buat seperti sintaks di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/fc3731af922542e668b9c2adb4b25700\/href\">https:\/\/medium.com\/media\/fc3731af922542e668b9c2adb4b25700\/href<\/a><p>Kita lakukan pengujian dengan Voice Over seperti video di bawah\u00a0ini.<\/p>\n<a href=\"https:\/\/medium.com\/media\/f9a8025714b47c0648d054b95e66b5ea\/href\">https:\/\/medium.com\/media\/f9a8025714b47c0648d054b95e66b5ea\/href<\/a><p>Jika anda menggunakan screen reader seperti <a href=\"https:\/\/www.apple.com\/voiceover\/info\/guide\/_1121.html\">Voice Over<\/a> (Mac) atau <a href=\"https:\/\/www.nvaccess.org\/\">NVDA<\/a> (Windows) dan menggunakan tombol <strong>TAB <\/strong>di keyboard akan berbunyi \u201cHobi Ngoding\u201d, \u201cHobi Tidur\u201d, \u201cHobi Makan\u201d, \u201cJenis kelamin Perempuan\u201d, \u201cJenis kelamin laki-laki\u201d. Berikutnya kita lakukan audit pada <strong>form-a11y-alternative-2.html<\/strong> menggunakan Lighthouse, hasilnya seperti sama seperti <strong>form-a11y-alternative-1.html<\/strong>.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*W9_XHZ7Tt-u_jgmR.png\"><figcaption>Audit form-a11y-alternative-2.html tanggal 24 Januari\u00a02018<\/figcaption><\/figure><p><strong>Bonus<\/strong><\/p>\n<p>Jika anda memperhatikan source code pada <strong>form-a11y-alternative2.html<\/strong> maka terdapat sebuah atribut bernama <strong>aria-labelledby<\/strong> pada field <strong>Hobi dan Jenis kelamin<\/strong>.<strong> <\/strong>Hal ini akan dibahas pada artikel selanjutnya.<\/p>\n<p><strong>Kesimpulan<\/strong><\/p>\n<ol>\n<li>Setiap form elemen harus berasosiasi dengan\u00a0label.<\/li>\n<li>Terdapat dua cara untuk melakukan hal tersebut. Pertama menambahkan atribut <strong>&lt;for&gt;<\/strong> pada label dan atribut <strong>&lt;id&gt;<\/strong> pada elemen form. Kedua, menambahkan membungkus form elemen dengan<strong> <\/strong><strong>&lt;label&gt;<\/strong>. Kedua cara tersebut dapat digunakan sesuai dengan kenyamanan anda dalam menciptakan Accessibility yang baik bagi pengguna disabilitas.<\/li>\n<\/ol>\n<p>Terima kasih telah membaca artikel ini, semoga bermanfaat, sebarkan dan jangan ragu bila ingin bertanya atau menyampaikan kritik dan saran di kolom komentar. \ud83d\ude09<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd20369c475b\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/studi-kasus-accessibility-web-form-cd20369c475b\">Studi Kasus Accessibility \u2014 Web Form<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["web-development","web","accessibility","a11y","forms"]},{"title":"Yang Web Developers Harus Tahu #4","pubDate":"2018-01-16 04:28:26","link":"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-4-63cbcf9ca3f?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/63cbcf9ca3f","author":"Yohan Totting","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/770\/1*WChv_tXK8rqUASVNxrqNSw.gif","description":"\n<p>Memulai 2018 biasanya dengan merencanakan kira-kira apa yang akan dilakukan selama setahun ke depan. Termasuk kira-kira akan belajar library atau framework apa, atau akan membuat sesuatu dan merilisnya ke publik dalam setahun ke depan. Apapun itu rencana kalian mudah-mudahan pilihan artikel ini bisa membantu mempermudah rencana\u00a0kalian.<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/github.com\/anttiviljami\/browser-autofill-phishing\"><strong>Autofill Di Browsers Bisa Mencuri Data\u00a0Kalian<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/770\/1*WChv_tXK8rqUASVNxrqNSw.gif\"><figcaption>Demo auto fill mengisi data <em>fields<\/em> tersembunyi<\/figcaption><\/figure><p>Fitur<em> auto fill form<\/em> di browser terkadang memudahkan tapi bisa juga dimanfaatkan untuk mencuri data <em>credentials<\/em> pengguna seperti password atau kartu kredit. Dengan menyembunyikan <em>input fields<\/em> dari tampilan namun tetap terisi pada saat kita mengaktifkan <em>auto fill <\/em>maka kita bisa mendapatkan data <em>credentials<\/em> tersebut. Nah sebagai web developers, informasi ini jangan digunakan justru untuk mencuri data tapi sebagai pembelajaran agar kalian mengerti bagaimana browsers berfungsi dan berpikir bagaimana agar web bisa lebih\u00a0aman.<\/p>\n<p><a href=\"https:\/\/developers.googleblog.com\/2018\/01\/real-world-data-in-pagespeed-insights.html\"><strong>Real World Data in Pagespeed Insight<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*XxcJKtpj2Bwh2eXBU5ToZQ.png\"><figcaption>Hasil test Pagespeed dengan data Chrome User Experience report<\/figcaption><\/figure><p><a href=\"https:\/\/developers.google.com\/speed\/pagespeed\/insights\">Pagespeed Insight<\/a> adalah tool untuk mengukur kecepatan tampil sebuah website. Dan Pagespeed Insight ini sekarang sudah mengintegrasikan hasil tes dengan <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-user-experience-report\/\">Chrome Experience Repor<\/a>t sehingga kalian akan bisa membandingkan hasil tes kalian dengan rata-rata kecepatan tampil berdasarkan data Chrome Experience report.<\/p>\n<p><a href=\"https:\/\/developers-id.googleblog.com\/2018\/01\/total-economic-impact-amp-terhadap.html\"><strong>Total Economic Impact AMP terhadap E-Commerce dan Publishers<\/strong><\/a><\/p>\n<p>Baru-baru ini <a href=\"https:\/\/www.ampproject.org\/\">Accelerated Mobile Page (AMP)<\/a>, yaitu <em>library<\/em> yang membantu kalian membangun aplikasi <em>mobile<\/em> web yang bisa tampil dengan sangat cepat di <em>mobile<\/em> merilis dampak kecepatan loading di <em>mobile<\/em> terhadap<em> e-commerce<\/em> dan <em>publishers<\/em> dari perspektif ekonomi. Laporan yang patut kalian baca agar paham kenapa website kalian harus loading kurang dari 5 detik di\u00a0<em>mobile<\/em>.<\/p>\n<h3>Artikel Menarik<\/h3>\n<p><a href=\"https:\/\/philna.sh\/blog\/2018\/01\/08\/permissions-on-the-web-suck\/\"><strong>Permission On The Web\u00a0Suck<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*8RAxp8AInOdySYK2QA11hA.png\"><\/figure><p><em>Permission<\/em> adalah permintaan akses ke pengguna untuk bisa menggunakan fitur yang bersifat <em>privacy<\/em>. Dan di web, permintaan akses hingga saat ini masih agak kurang baik bagi pengguna. Lihat saja bagaimana web yang ada meminta notifikasi <em>push<\/em> tanpa memberikan alasan kenapa mereka meminta akses tersebut. Artikel ini memberikan gambaran bagaimana harusnya permintaan akses tersebut bisa lebih\u00a0baik.<\/p>\n<p><a href=\"http:\/\/smus.com\/web-voice-command-recognition\/\"><strong>Web Based Voice Command Recognition<\/strong><\/a><\/p>\n<p>Kalau kalian familiar dengan <em>personal assistant<\/em> seperti Siri atau Google Assistant, tentu kalian familiar dengan pengenalan suara. Artikel ini menunjukan kemampuan dari web untuk bisa melakukan fungsi serupa tanpa harus mengirim data ke <em>server<\/em>. Menggunakan <em>library<\/em> <a href=\"https:\/\/deeplearnjs.org\/\">DeeplearnJS<\/a> contoh ini menunjukkan bagaimana dia bisa mengenali jawaban <em>yes<\/em> dan <em>no<\/em>. Contoh sederhana untuk kalian memulai <em>machine learning<\/em> di\u00a0web.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/optimizing-content-efficiency\/javascript-startup-optimization\/\"><strong>JavaScript Startup Optimization<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*_GTFrViPQycXDCInlr1X_Q.png\"><figcaption>Proses rendering di\u00a0browser<\/figcaption><\/figure><p>Rata-rata aplikasi web modern sekarang dibangun dengan <em>framework<\/em> modern yang menjalankan hampir semua fungsi di browser dengan konsep <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/architecture\/app-shell\"><em>application shell<\/em><\/a>. Dan fungsi tersebut tentu ditulis dengan JavaScript, dan dampaknya adalah ukuran kode JavaScript yang makin besar dan tentu membutuhkan waktu untuk <em>parsing<\/em> lebih lama. Artikel ini mencoba memberikan arahan ke <em>developers<\/em> bagaimana kalian bisa mengoptimalkan kode kalian agar lebih cepat diparsing dan dijalankan oleh <em>browsers<\/em>.<\/p>\n<p><a href=\"https:\/\/medium.com\/airbnb-engineering\/server-rendering-code-splitting-and-lazy-loading-with-react-router-v4-bfe596a6af70\"><strong>Server Rendering, Code Splitting, and Lazy Loading with React Router\u00a0v4<\/strong><\/a><\/p>\n<p>Transisi dari monolith app hingga menjadi app shell app seperti di Airbnb ini menarik untuk inspirasi developer. Dimulai dari Ruby, lalu server rendering dengan <a href=\"https:\/\/github.com\/airbnb\/hypernova\">Hypernova<\/a> library yang dikembangkan Airbnb untuk kebutuhan server rendering, hingga akhirnya menerapkan universal rendering dengan React router\u00a0v4.<\/p>\n<h3>Tools, Libraries, dan Frameworks<\/h3>\n<p><a href=\"https:\/\/github.com\/developit\/workerize-loader\"><strong>Workerize<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*kDj27d94hTpeeWy5nW4tOg.png\"><\/figure><p><a href=\"https:\/\/twitter.com\/_developit\">Jason Miller<\/a>, developer yang membuat <a href=\"https:\/\/preactjs.com\/\">Preact<\/a>, library alternatif untuk <a href=\"https:\/\/reactjs.org\/\">React<\/a> merilis library baru untuk memindahkan load modules ke thread terpisah di workers thread. Ide ini menarik karena dengan memisahkan thread untuk module, maka module tersebut tidak akan mengganggu thread utama untuk rendering tampilan.<\/p>\n<p><a href=\"https:\/\/wordpress.org\/plugins\/mcw-pwa\/\"><strong>Minimum Configuration WordPress PWA<\/strong><\/a><\/p>\n<p><a href=\"https:\/\/wordpress.org\/\">WordPress<\/a> adalah CMS paling populer di Indonesia karena kemudahan penggunaan, tersedia gratis, serta fleksibilitas kostumasinya untuk fungsi tambahan. Nah <a href=\"https:\/\/developers.google.com\/web\/progressive-web-apps\/\">Progressive Web App sendiri <\/a>bertujuan untuk meningkatkan pengalaman pembaca WordPress site yang salah satunya dengan mempercepat waktu loading website. Dan plugin Minimum Configuration WordPress PWA ini memudahkan pemilik WordPress site untuk mengadopsi PWA tanpa perlu mengerti teknis web programming.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/lighthouse\"><strong>Lighthouse 2.7 dengan SEO\u00a0Audit<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/840\/1*TqdvyzfS6w8pd1tBHyEdpw.png\"><\/figure><p>Akhirnya salah satu kebutuhan wajib developer untuk melakukan <em>search engine optimization<\/em> (SEO) bisa lebih mudah dengan rilis terbaru dari <a href=\"https:\/\/developers.google.com\/web\/tools\/lighthouse\/\">Lighthouse audit tool<\/a> ini. Dengan demikian developers bisa memahami <em>best practice<\/em> untuk mengoptimalkan website mereka untuk <em>search engine indexing<\/em>.<\/p>\n<p><a href=\"https:\/\/code.visualstudio.com\/blogs\/2017\/12\/20\/chrome-debugging\"><strong>Chrome Debugging dari Visual Studio\u00a0Code<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*IDFHL0FnM1ut1-up1IT8_g.gif\"><figcaption>Chrome Debugging with Visual Studio\u00a0Code<\/figcaption><\/figure><p>Kalau kalian masih terbiasa melakukan <em>debugging<\/em> dengan <em>console.log()<\/em> maka sudah saatnya kalian mengefesiensikan proses <em>debugging<\/em> dengan <em>tool<\/em> yang tepat. Dengan <a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>, kalian bisa melakukan <em>debugging<\/em> dengan <em>set break<\/em> di posisi kode tertentu di Visual Studio Code kalian dan melihat <em>state<\/em> dari beberapa <em>variables<\/em> langsung di <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/\">Chrome Dev\u00a0Tool<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=63cbcf9ca3f\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-4-63cbcf9ca3f\">Yang Web Developers Harus Tahu #4<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<p>Memulai 2018 biasanya dengan merencanakan kira-kira apa yang akan dilakukan selama setahun ke depan. Termasuk kira-kira akan belajar library atau framework apa, atau akan membuat sesuatu dan merilisnya ke publik dalam setahun ke depan. Apapun itu rencana kalian mudah-mudahan pilihan artikel ini bisa membantu mempermudah rencana\u00a0kalian.<\/p>\n<h3>Berita Terbaru<\/h3>\n<p><a href=\"https:\/\/github.com\/anttiviljami\/browser-autofill-phishing\"><strong>Autofill Di Browsers Bisa Mencuri Data\u00a0Kalian<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/770\/1*WChv_tXK8rqUASVNxrqNSw.gif\"><figcaption>Demo auto fill mengisi data <em>fields<\/em> tersembunyi<\/figcaption><\/figure><p>Fitur<em> auto fill form<\/em> di browser terkadang memudahkan tapi bisa juga dimanfaatkan untuk mencuri data <em>credentials<\/em> pengguna seperti password atau kartu kredit. Dengan menyembunyikan <em>input fields<\/em> dari tampilan namun tetap terisi pada saat kita mengaktifkan <em>auto fill <\/em>maka kita bisa mendapatkan data <em>credentials<\/em> tersebut. Nah sebagai web developers, informasi ini jangan digunakan justru untuk mencuri data tapi sebagai pembelajaran agar kalian mengerti bagaimana browsers berfungsi dan berpikir bagaimana agar web bisa lebih\u00a0aman.<\/p>\n<p><a href=\"https:\/\/developers.googleblog.com\/2018\/01\/real-world-data-in-pagespeed-insights.html\"><strong>Real World Data in Pagespeed Insight<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*XxcJKtpj2Bwh2eXBU5ToZQ.png\"><figcaption>Hasil test Pagespeed dengan data Chrome User Experience report<\/figcaption><\/figure><p><a href=\"https:\/\/developers.google.com\/speed\/pagespeed\/insights\">Pagespeed Insight<\/a> adalah tool untuk mengukur kecepatan tampil sebuah website. Dan Pagespeed Insight ini sekarang sudah mengintegrasikan hasil tes dengan <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-user-experience-report\/\">Chrome Experience Repor<\/a>t sehingga kalian akan bisa membandingkan hasil tes kalian dengan rata-rata kecepatan tampil berdasarkan data Chrome Experience report.<\/p>\n<p><a href=\"https:\/\/developers-id.googleblog.com\/2018\/01\/total-economic-impact-amp-terhadap.html\"><strong>Total Economic Impact AMP terhadap E-Commerce dan Publishers<\/strong><\/a><\/p>\n<p>Baru-baru ini <a href=\"https:\/\/www.ampproject.org\/\">Accelerated Mobile Page (AMP)<\/a>, yaitu <em>library<\/em> yang membantu kalian membangun aplikasi <em>mobile<\/em> web yang bisa tampil dengan sangat cepat di <em>mobile<\/em> merilis dampak kecepatan loading di <em>mobile<\/em> terhadap<em> e-commerce<\/em> dan <em>publishers<\/em> dari perspektif ekonomi. Laporan yang patut kalian baca agar paham kenapa website kalian harus loading kurang dari 5 detik di\u00a0<em>mobile<\/em>.<\/p>\n<h3>Artikel Menarik<\/h3>\n<p><a href=\"https:\/\/philna.sh\/blog\/2018\/01\/08\/permissions-on-the-web-suck\/\"><strong>Permission On The Web\u00a0Suck<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*8RAxp8AInOdySYK2QA11hA.png\"><\/figure><p><em>Permission<\/em> adalah permintaan akses ke pengguna untuk bisa menggunakan fitur yang bersifat <em>privacy<\/em>. Dan di web, permintaan akses hingga saat ini masih agak kurang baik bagi pengguna. Lihat saja bagaimana web yang ada meminta notifikasi <em>push<\/em> tanpa memberikan alasan kenapa mereka meminta akses tersebut. Artikel ini memberikan gambaran bagaimana harusnya permintaan akses tersebut bisa lebih\u00a0baik.<\/p>\n<p><a href=\"http:\/\/smus.com\/web-voice-command-recognition\/\"><strong>Web Based Voice Command Recognition<\/strong><\/a><\/p>\n<p>Kalau kalian familiar dengan <em>personal assistant<\/em> seperti Siri atau Google Assistant, tentu kalian familiar dengan pengenalan suara. Artikel ini menunjukan kemampuan dari web untuk bisa melakukan fungsi serupa tanpa harus mengirim data ke <em>server<\/em>. Menggunakan <em>library<\/em> <a href=\"https:\/\/deeplearnjs.org\/\">DeeplearnJS<\/a> contoh ini menunjukkan bagaimana dia bisa mengenali jawaban <em>yes<\/em> dan <em>no<\/em>. Contoh sederhana untuk kalian memulai <em>machine learning<\/em> di\u00a0web.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/performance\/optimizing-content-efficiency\/javascript-startup-optimization\/\"><strong>JavaScript Startup Optimization<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*_GTFrViPQycXDCInlr1X_Q.png\"><figcaption>Proses rendering di\u00a0browser<\/figcaption><\/figure><p>Rata-rata aplikasi web modern sekarang dibangun dengan <em>framework<\/em> modern yang menjalankan hampir semua fungsi di browser dengan konsep <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/architecture\/app-shell\"><em>application shell<\/em><\/a>. Dan fungsi tersebut tentu ditulis dengan JavaScript, dan dampaknya adalah ukuran kode JavaScript yang makin besar dan tentu membutuhkan waktu untuk <em>parsing<\/em> lebih lama. Artikel ini mencoba memberikan arahan ke <em>developers<\/em> bagaimana kalian bisa mengoptimalkan kode kalian agar lebih cepat diparsing dan dijalankan oleh <em>browsers<\/em>.<\/p>\n<p><a href=\"https:\/\/medium.com\/airbnb-engineering\/server-rendering-code-splitting-and-lazy-loading-with-react-router-v4-bfe596a6af70\"><strong>Server Rendering, Code Splitting, and Lazy Loading with React Router\u00a0v4<\/strong><\/a><\/p>\n<p>Transisi dari monolith app hingga menjadi app shell app seperti di Airbnb ini menarik untuk inspirasi developer. Dimulai dari Ruby, lalu server rendering dengan <a href=\"https:\/\/github.com\/airbnb\/hypernova\">Hypernova<\/a> library yang dikembangkan Airbnb untuk kebutuhan server rendering, hingga akhirnya menerapkan universal rendering dengan React router\u00a0v4.<\/p>\n<h3>Tools, Libraries, dan Frameworks<\/h3>\n<p><a href=\"https:\/\/github.com\/developit\/workerize-loader\"><strong>Workerize<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*kDj27d94hTpeeWy5nW4tOg.png\"><\/figure><p><a href=\"https:\/\/twitter.com\/_developit\">Jason Miller<\/a>, developer yang membuat <a href=\"https:\/\/preactjs.com\/\">Preact<\/a>, library alternatif untuk <a href=\"https:\/\/reactjs.org\/\">React<\/a> merilis library baru untuk memindahkan load modules ke thread terpisah di workers thread. Ide ini menarik karena dengan memisahkan thread untuk module, maka module tersebut tidak akan mengganggu thread utama untuk rendering tampilan.<\/p>\n<p><a href=\"https:\/\/wordpress.org\/plugins\/mcw-pwa\/\"><strong>Minimum Configuration WordPress PWA<\/strong><\/a><\/p>\n<p><a href=\"https:\/\/wordpress.org\/\">WordPress<\/a> adalah CMS paling populer di Indonesia karena kemudahan penggunaan, tersedia gratis, serta fleksibilitas kostumasinya untuk fungsi tambahan. Nah <a href=\"https:\/\/developers.google.com\/web\/progressive-web-apps\/\">Progressive Web App sendiri <\/a>bertujuan untuk meningkatkan pengalaman pembaca WordPress site yang salah satunya dengan mempercepat waktu loading website. Dan plugin Minimum Configuration WordPress PWA ini memudahkan pemilik WordPress site untuk mengadopsi PWA tanpa perlu mengerti teknis web programming.<\/p>\n<p><a href=\"https:\/\/developers.google.com\/web\/updates\/2018\/01\/lighthouse\"><strong>Lighthouse 2.7 dengan SEO\u00a0Audit<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/840\/1*TqdvyzfS6w8pd1tBHyEdpw.png\"><\/figure><p>Akhirnya salah satu kebutuhan wajib developer untuk melakukan <em>search engine optimization<\/em> (SEO) bisa lebih mudah dengan rilis terbaru dari <a href=\"https:\/\/developers.google.com\/web\/tools\/lighthouse\/\">Lighthouse audit tool<\/a> ini. Dengan demikian developers bisa memahami <em>best practice<\/em> untuk mengoptimalkan website mereka untuk <em>search engine indexing<\/em>.<\/p>\n<p><a href=\"https:\/\/code.visualstudio.com\/blogs\/2017\/12\/20\/chrome-debugging\"><strong>Chrome Debugging dari Visual Studio\u00a0Code<\/strong><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*IDFHL0FnM1ut1-up1IT8_g.gif\"><figcaption>Chrome Debugging with Visual Studio\u00a0Code<\/figcaption><\/figure><p>Kalau kalian masih terbiasa melakukan <em>debugging<\/em> dengan <em>console.log()<\/em> maka sudah saatnya kalian mengefesiensikan proses <em>debugging<\/em> dengan <em>tool<\/em> yang tepat. Dengan <a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>, kalian bisa melakukan <em>debugging<\/em> dengan <em>set break<\/em> di posisi kode tertentu di Visual Studio Code kalian dan melihat <em>state<\/em> dari beberapa <em>variables<\/em> langsung di <a href=\"https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/\">Chrome Dev\u00a0Tool<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=63cbcf9ca3f\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/yang-web-developers-harus-tahu-4-63cbcf9ca3f\">Yang Web Developers Harus Tahu #4<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["newsletter","front-end-development","web-development"]},{"title":"Web Components \u2014 Apa, Mengapa dan Bagaimana","pubDate":"2018-01-13 00:38:26","link":"https:\/\/medium.com\/wwwid\/web-components-apa-mengapa-dan-bagaimana-d23f60951dfa?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/d23f60951dfa","author":"Satya Kresna Adi Pratama","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*32zCix-d6O4_4bDsCW_T3Q.png","description":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*32zCix-d6O4_4bDsCW_T3Q.png\"><figcaption>Web Components\u200a\u2014\u200aApa, Mengapa dan Bagaimana?<\/figcaption><\/figure><h3>Pendahuluan<\/h3>\n<p>Sebagai web developer, wajib hukumnya untuk up to date terhadap teknologi web mulai dari dengerin podcast, lihat forum, follow para developer dan engineer di Twitter dan baca artikel di <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> tentunya. \ud83d\ude09<\/p>\n<p>Pernahkah anda membuka sebuah website dan iseng meng-inspect elemen atau view page source dan menemukan tag HTML yang tak lazim (contoh: &lt;foo-bar&gt; atau &lt;custom-tag&gt;)? Mungkin anda akan berpikir jika tag HTML tersebut tidak tersedia <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\">di tag HTML<\/a> pada umumnya. Jika anda menemukannya, selamat anda telah menemukan sebagian kepingan dunia web modern jaman now. Perkenalkan Web Components, sebuah fitur bagi anda untuk menciptakan tag HTML milik anda\u00a0sendiri.<\/p>\n<h3>TL;DR<\/h3>\n<h4>Apa itu Web Components?<\/h4>\n<p>Secara singkat, Web Components adalah set plaform web API untuk membuat custom tag HTML yang reusable (bisa digunakan kembali) dan dienkapsulasi (child-tag dibungkus oleh parents-tag) di halaman atau aplikasi web yang kita\u00a0miliki.<\/p>\n<h4>Mengapa dia\u00a0lahir?<\/h4>\n<p>Web developer mengalami ketergantungan beragam framework dan library dalam membangun dan memelihara aplikasi. Ketergantungan yang saya maksud adalah membangun tag HTML element yang diberi CSS dan JS. Jika anda menggunakan sebuah framework seperti Bootstrap untuk membangun sebuah tag button, navs dan pagination kurang lebih sintaksnya seperti\u00a0ini:<\/p>\n<p><strong>Bootstrap button<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/1b2b4e0bcf88e187c6cbb31c9e395585\/href\">https:\/\/medium.com\/media\/1b2b4e0bcf88e187c6cbb31c9e395585\/href<\/a><p><strong>Bootstrap nav<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/c97509e79c9fa8f191c690a1cc6b4154\/href\">https:\/\/medium.com\/media\/c97509e79c9fa8f191c690a1cc6b4154\/href<\/a><p><strong>Bootstrap pagination<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/ecc0193e2cf23c7035f3a03e7d5b362e\/href\">https:\/\/medium.com\/media\/ecc0193e2cf23c7035f3a03e7d5b362e\/href<\/a><p>Jika menggunakan Web Components, anda dapat mendefinisikan nya dengan tag\u200a\u2014\u200atag di atas seperti source code di\u00a0bawah.<\/p>\n<p><strong>Custom button<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/82db86a5487ddefedf1844ff54f7b154\/href\">https:\/\/medium.com\/media\/82db86a5487ddefedf1844ff54f7b154\/href<\/a><p><strong>Custom nav<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/92d50207712cb407b6a0dcc59bb6956f\/href\">https:\/\/medium.com\/media\/92d50207712cb407b6a0dcc59bb6956f\/href<\/a><p><strong>Custom pagination<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/266a251190299e0f7ff792945ae9883a\/href\">https:\/\/medium.com\/media\/266a251190299e0f7ff792945ae9883a\/href<\/a><p>Bagaimana? Tidak ada \u201cdiv\u201d dan anda menciptakan tag html buatan anda. Masih ingat dengan pasal mutlak \u201cProgrammer itu pemalas\u201d? \u2764\ufe0f Web Components.<\/p>\n<p>Web components lahir dari konsep desain yg modular (standar) dengan tujuan memudahkan para developer untuk menciptakan komponen atau elemen web yg dapat diperpanjang (extensible), digunakan kembali (reusable), mudah dipelihara (maintainable). Selain itu dengan dapat memudahkan kita melakukan pemisahan konsentrasi terhadap komponen kita (separation of concern) mulai dari scoping style CSS hingga DOM di JavaScript.<\/p>\n<h4>Bagaimana proses lahirnya Web Components?<\/h4>\n<p>Semula, istilah \u201cweb components\u201d digunakan oleh Microsoft untuk menggambarkan add-ons mereka ke Office. Kemudian Sun, sekarang yang dikenal sebagai Oracle, digunakan untuk menggambarkan Java servlets. Kata \u201ccomponent\u201d juga bukanlah hal yang baru ketika membahas CBSE (Component Based Software Engineering), yang didasarkan pada pendekatan pengembangan sistem perangkat lunak dengan memilih komponen yang sudah ada dan kemudian merakitnya menggunakan arsitektur perangkat lunak yang terdefinisi dengan baik. Sejak awal tahun 2011 dan juga sekarang, istilah \u201cWeb Components\u201d telah digunakan merujuk pada standar W3C yang\u00a0baru.<\/p>\n<p>Pengembangan \u201cWeb Components\u201d yang modern dapat ditelusuri kembali di tahun 2005, dengan dimulainya revolusi \u201cAJAX\u201d dan server side framework RAD (Rapid Application Development) seperti Ruby on Rails, CakePHP dan Django. Teknologi ini membantu pengembangan front-end dengan memberikan konten secara asynchronous sambil mempertahankan kinerja dan memungkinkan situs web dibangun dalam beberapa minggu daripada beberapa bulan. Selain itu, pada tahun 2005, toolkit DOJO diluncurkan, memungkinkan pengembang menambahkan widget ke situs web mereka hanya dengan beberapa baris kode. Hal ini semakin menggarisbawahi keuntungan pembuatan modul yang dapat digunakan kembali (reusable modules).<\/p>\n<p>Pada tahun 2006, library JavaScript, jQuery dirilis. Library ini memungkinkan developer untuk menulis program JavaScript memanfaatkan API yang disederhanakan untuk interaksi DOM di berbagai macam web browser. Ini membantu memulai era \u201csingle page apps\u201d. Mendampingi kesuksesan jQuery, banyak sekali library front-end, toolkit dan framework lainnya termasuk YUI, Prototype dan Extjs\u200a\u2014\u200amasing-masing berisi stok widget library mereka sendiri. Sekitar tahun 2010 terlihat kemajuan besar dalam pengembangan sisi klien dan popularitas aplikasi satu halaman, yang mengarah ke implementasi sisi klien dari pola MV* (Model View Whatever). Di sini, pentingnya komponen UI yang dapat digunakan kembali dan dienkapsulasi menjadi semakin relevan karena kode yang menggelembung dalam single web apps berskala besar dan front-end framework.<\/p>\n<p>Saat ini library, toolkit dan framework semua tampaknya memiliki keterbatasan besar\u200a\u2014\u200akeduanya tidak berinteraksi dengan baik, developer juga tidak bisa dengan mudah mencampur dan mencocokkan komponen dari framework atau library yang berbeda. Keterbatasan utama lainnya saat bekerja dengan komponen berbasis library adalah platform browser itu\u00a0sendiri.<\/p>\n<blockquote>Jika vendor browser berhasil membangun kemampuan untuk mengenkapsulasi, mengemas, dan menggunakan kembali kode HTML dan DOM API sebelum revolusi AJAX, perkembangan web modern mungkin akan sangat berbeda hari ini. Inilah yang ditawarkan oleh Web Components\u200a\u2014\u200adukungan native browser untuk memperluas, mengemas, mengenkapsulasi, dan mengimpor UI.<\/blockquote>\n<p>Google telah menjadi advokat terdepan untuk Web Components sejak draf W3C pertama di bulan Mei 2012, yang dipimpin oleh dua Googler yakni <a href=\"https:\/\/github.com\/dglazkov\">Dimitri Glazkov<\/a> dan <a href=\"https:\/\/twitter.com\/hayatoito\">Hayato Ito<\/a>. Investasi Google dalam Web Components terbukti pada tahun 2013 Google I\/O di mana mereka mengumumkan Polymer, library ciptaan mereka untuk membangun komponen. Sejak itu, banyak sumber daya website seperti <a href=\"http:\/\/webcomponents.org\/\">webcomponents.org<\/a> dan customelements.io dan framework seperti <a href=\"https:\/\/x-tag.github.io\/\">X-tag<\/a> dan <a href=\"http:\/\/bosonic.github.io\/\">Bosonic<\/a>, memungkinkan penerapan komponen web secara modern dengan dukungan browser yang lebih\u00a0baik.<\/p>\n<h4>Apa spesifikasi dari web components?<\/h4>\n<p>Web Components memiliki empat spesifikasi meliputi:<\/p>\n<p><strong>A. Custom Elements<\/strong><br> Salah satu yang bisa saya katakan menonjol dari Web Components adalah Custom Elements. Ia adalah sebuah spesifikasi atau syarat yang memperbolehkan developer untuk membuat tag HTML baru, mengextend tag HTML yang sudah ada atau mengextend komponen yang telah dibuat oleh developer lain. Custom Elements menyediakan sebuah jalan secara native untuk membuat komponen yang dapat digunakan kembali (re-usable components). Spesifikasi ini harus didefinisikan dalam JavaScript dan memiliki beberapa siklus kehidupan (lifecycle) seperti kode di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/05662f889940955e1c4d4cc3fdb2149e\/href\">https:\/\/medium.com\/media\/05662f889940955e1c4d4cc3fdb2149e\/href<\/a><p>Jika anda ingin menambahkan DOM ke dalam elemen dapat dilakukan dengan menambahkan markup ke dalam<br> this.innerHTML:<\/p>\n<a href=\"https:\/\/medium.com\/media\/745f3a1eaea92cab75ad9923167f93a3\/href\">https:\/\/medium.com\/media\/745f3a1eaea92cab75ad9923167f93a3\/href<\/a><p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Nama harus terdiri dari minimal dua kata dan berisi tanda strip (-) untuk memisahkan setiap kata (contoh: &lt;foo-bar&gt;). Kita sebut ini dengan istilah <strong><em>kebab-case.<\/em><\/strong>\n<\/li>\n<li>Nama harus\u00a0unik.<\/li>\n<li>Custom Elements harus disertai dengan closing tag (contoh: &lt;foo-bar&gt;&lt;\/foo-bar&gt;) dan tidak bisa melakukan self closing tag (contoh: &lt;foo-bar&gt; tidak\u00a0bisa).<\/li>\n<li>Berdasarkan spesifikasi custom elements, kita bisa meng-extend tag HTML element native yang sudah ada (contoh: HTMLButtonElement). Jika anda melakukannya maka, elemen kustom yang kita buat akan mewarisi langsung semua fungsionalitas yang ada di HTMLButtonElement. Sayangnya, hal ini belum diimplementasikan di browser manapun.\u00a0\ud83d\ude2d<\/li>\n<li>HTML template adalah tempat yang ideal untuk markup (shadow) DOM sebuah custom elements.<\/li>\n<li>Selalu tambahkan method getter dan setter untuk semua dan setiap jenis atribut yang anda\u00a0gunakan.<\/li>\n<\/ul>\n<p><strong>HTML Templates<\/strong><br> HTML templates adalah spesifikasi atau syarat yang memberikan memperbolehkan developer untuk mendeklarasikan fragment (potongan) markup yang mana diurai sebagai HTML, tidak dipakai saat loading halaman, tetapi dapat diinstansiasi nanti saat dijalankan (runtime).<\/p>\n<p>Membuat template semudah seperti membuat elemen DOM pada\u00a0umumnya.<\/p>\n<a href=\"https:\/\/medium.com\/media\/4c519415c4a0579ea39c3cb44a87fbad\/href\">https:\/\/medium.com\/media\/4c519415c4a0579ea39c3cb44a87fbad\/href<\/a><p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Isi dari template tidak aktif sampai diaktifkan.<\/li>\n<li>Tidak ada efek samping sampai template digunakan.<\/li>\n<li>Konten dianggap tidak berada di\u00a0DOM.<\/li>\n<li>Template dapat ditempatkan di\u00a0manapun.<\/li>\n<li>Tidak ada bentuk native data-binding. Jadi, anda masih memerlukan sebuah library untuk mengatasinya atau menulis beberapa logika bisnis sendiri untuk benar-benar mengisi template dengan konten yang bermanfaat.<\/li>\n<\/ul>\n<p><strong>Shadow DOM<\/strong><br> Shadow DOM hanyalah sebuah DOM yang normal dengan dua perbedaan: 1) bagaimana dia dibuat\/digunakan dan 2) bagaimana berperilaku dalam kaitannya dengan sisa halaman. Biasanya, anda membuat sebuah DOM nodes dan menambahkan mereka sebagai anak di elemen lain. Dengan shadow DOM, anda dapat membuat sebuah ruang lingkup (scoped) DOM tree yang disisipkan ke dalam sebuah elemen, tetapi terpisah dari anak yang sebenarnya. Ruang lingkup subtree ini disebut dengan shadow tree. Elemen yang disisipkan disebut dengan shadow host. Semua yang anda tambahkan ke dalam shadow menjadi lokal ke elemen yang dihost, termasuk &lt;style&gt;. Seperti inilah bagaimana shadow DOM mencapai ruang lingkup style\u00a0CSS.<\/p>\n<p>Anda mungkin telah menggunakan shadow DOM sebelumnya, bahkan ketika anda tidak menyadarinya. Browser menggunakan shadow DOM untuk beragam elemen HTML native seperti range\u00a0input:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*X5W3o9aHl1KRd3y-hVYvRw.png\"><figcaption>shadow-root user agent pada input type=\u201drange\u201d<\/figcaption><\/figure><p>Anda belum bisa melihat shadow-root (user-agent) pada elemen HTML native. Yang perlu anda lakukan adalah klik kanan inspect element &gt; pilih opsi Settings &gt; pilih sesi Elements &gt; centang Show user agent shadow DOM. Jika anda mengalami kesulitan, anda bisa melihatnya di <a href=\"https:\/\/www.youtube.com\/watch?v=7gDvFlvoZKQ\">video\u00a0ini<\/a>.<\/p>\n<blockquote>Jika anda membuat style CSS dengan id=\"track\" atau id=\"thumb\" apakah akan berpengaruh terhadap shadow root di input type=\"range\"?<\/blockquote>\n<p>API shadow DOM mengijinkan developer untuk membuat dan menyisipkan shadow DOM ke dalam elemen, yang mana sangat bagus jika digabungkan dengan Custom Elements.<\/p>\n<p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Style yang menggunakan shadow DOM hanya akan berpengaruh pada ruang lingkup (scoped) elemen itu\u00a0saja.<\/li>\n<li>Gunakan\u00a0:host selector untuk style parent container.<\/li>\n<li>position: fixed and posisi CSS lainnya digunakan untuk membatasi komponen sebagai \"viewport\".<\/li>\n<li>Style CSS dari elemen di dalam shadow-root dapat ditimpa dari light-dom (\u201cregular\u201d \/ \u201cparent\u201d\u00a0-dom).<\/li>\n<\/ul>\n<p><strong>HTML Imports<\/strong><br> Biasanya kita dapat mengimpor aset seperti CSS dengan tag &lt;link rel=\"stylesheet\"&gt; dan JavaScript dengan tag &lt;script src=\"foobar.js\"&gt; file ke dalam markup HTML. Pernahkah anda mencoba mengimpor sebuah dokumen HTML? Jika iya, maka HTML import sudah tidak asing bagi anda. Dengan HTML imports, anda dapat menyisipkan dokumen HTML. Anda bisa mengimpor satu dokumen yang isinya HTML, CSS dan JavaScript sesuai dengan kebutuhan anda.<\/p>\n<p>Mengimpor dokumen HTML sangat mirip dengan impor sebuah style\u00a0CSS:<\/p>\n<p>&lt;link rel=\"import\" href=\"foobar.html\" \/&gt;<\/p>\n<p>Dengan segera file yang dimpor akan diload, script yang disematkan akan berjalan dan kontennya dapat digunakan dengan mereferensikan properti import dari\u00a0elemen:<\/p>\n<pre>const content = document.querySelector('link[rel=\"import\"]').import;<\/pre>\n<p>API ini akan berguna ketika mengimpor custom elements\u00a0lainnya.<\/p>\n<blockquote><em>Salah satu catatan utama tentang dukungan browser terhadap HTML Import: Chrome telah menerapkan (implement) dan mengirimkannya (shipped), namun WebKit dan Firefox tidak akan menerapkannya sama sekali. WebKit menetapkan bahwa mereka ingin menyelidiki kombinasi dengan modul\u00a0ES6.<\/em><\/blockquote>\n<p>Hal\u200a\u2014\u200ahal yang perlu diperhatikan:<\/p>\n<ul>\n<li>link rel=import de-duplikat semua permintaan secara\u00a0otomatis<\/li>\n<li>Dokumen yang diimpor tidak ditempatkan di DOM manapun, hanya dibuat tersedia untuk\u00a0gunakan.<\/li>\n<li>Tag &lt;script&gt; di dalam dokumen impor akan berjalan pada HTML\u00a0import.<\/li>\n<li>Statement import dibloking secara default, tetapi menerima atribut\u00a0async.<\/li>\n<li>Ketika mengakses document dari dalam dokumen yang akan diimpor, sebenarnya anda mengakses parent document. document.currentScript.ownerDocument merujuk kepada \"child\"-document.<\/li>\n<li>HTML import yang bersarang akan mengencangkan (screw) dengan document.currentScript.ownerDocument. Untuk mencegah hal tersebut, bungkus script bersarang tersebut di dalam <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/IIFE\">IIFE<\/a> dengan document.currentScript.ownerDocument sebagai parameter.<\/li>\n<\/ul>\n<h4>Bagaimana cara membuat vanilla web components?<\/h4>\n<p>Sejauh ini, saya menemukan dua contoh yang bagus dan baik untuk membuat vanilla web components (tanpa framework dan library). Silahkan anda membaca di link <a href=\"https:\/\/www.codementor.io\/ayushgupta\/vanilla-js-web-components-chguq8goz\">codementor.io (studi kasus user card)<\/a> dan <a href=\"https:\/\/github.com\/rijkvanzanten\/nasa-apod\">github.com milik Rijk van Zanten (studi kasus NASA Apod)<\/a>. Jika anda menemukan contoh bagus lainnya silahkan beri komentar di artikel ini.\u00a0\ud83d\ude09<\/p>\n<h4>Bagaimana status web components saat\u00a0ini?<\/h4>\n<p>Berdasarkan situs caniuse.com, status web components sebagai gambar di bawah dan saya mengaksesnya pada tanggal 12 Januari 2018. Jadi, akan ada perubahan di waktu yang tidak ditentukan.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*hXtygv3ibevNCUk0.png\"><figcaption>Dukungan Custom Elements via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*aEk18d2RyYJIVyHJ.png\"><figcaption>Dukungan shadow DOM via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*YguigXKVqAKw7c_w.png\"><figcaption>Dukungan HTML templates via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*ok6YtdxX_i3oKhPn.png\"><figcaption>Dukungan HTML imports via\u00a0caniuse<\/figcaption><\/figure><p>Hal\u200a\u2014\u200ahal yang perlu diperhatikan:<\/p>\n<ul>\n<li>Kita masih belum bisa mengextend elemen native HTML a.k.a. customized built-in elements (contoh: HTMLButtonElement) untuk membuat Custom Elements seperti yang dijelaskan pada gambar Custom Elements via\u00a0caniuse.<\/li>\n<li>Firefox, WebKit tidak mempertimbangkan untuk membuat spesifikasi HTML Imports di browser mereka. Info terakhir yang saya dapatkan bahwa <a href=\"https:\/\/github.com\/TakayoshiKochi\/deprecate-style-in-html-imports\">Chrome juga akan menghapus HTML Imports di browser mereka segera sekitar bulan Maret tahun 2018<\/a>. Sebagai gantinya para browser vendor akan menggantinya dengan HTML Module a.k.a. ES6\u00a0modules.<\/li>\n<li>\n<a href=\"https:\/\/twitter.com\/FirefoxNightly\/status\/951009715584225280\">Custom Elements versi 1 telah dirilis pada Firefox Nightly<\/a>.\u00a0\ud83c\udf89<\/li>\n<\/ul>\n<p><strong>Mengapa belum disupport secara menyeluruh?<\/strong><\/p>\n<p>Perlu kita ketahui bahwa pekerjaan browser vendor tidak hanya mengurusi Web Components saja. Banyak fitur lain yang harus mereka prioritaskan sesuai dengan kebijakan para browser vendor. Contoh <a href=\"https:\/\/webkit.org\/blog\/8042\/release-notes-for-safari-technology-preview-46\/\">Safari<\/a> dan <a href=\"https:\/\/twitter.com\/MSEdgeDev\/status\/943181166554705920\">Ms. Edge<\/a> meluncurkan Service Worker secara default di browser Tech Preview di bulan Desember 2017. Kemudian, kali ini Safari sedang mengembangkan web manifest, salah satu syarat untuk PWA berdasarkan <a href=\"https:\/\/twitter.com\/firt\/status\/951216290991104000\">tweet Maximiliano Firtman<\/a>. Lalu bagaimana solusi agar bisa disupport secara menyeluruh? Web Components telah menyediakan sebuah <a href=\"https:\/\/www.webcomponents.org\/polyfills\/\">polyfills<\/a> untuk menanggulangi hal tersebut. Menurut perspektif saya, polyfill bersifat sementara hingga semua browser vendor mendukung Web Components dan para pengguna tidak menggunakan Internet Explorer seperti gambar yang saya dapatkan di situs <a href=\"https:\/\/www.w3schools.com\/browsers\/\">w3schools.com (Browser Statistics)<\/a>.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*UbkH1Y-JZ-yV6PUK.png\"><figcaption>browser statistics via w3schools<\/figcaption><\/figure><p><strong>Apa yang harus saya lakukan selanjutnya?<\/strong><\/p>\n<p>Artikel ini hanyalah sebagian kecil dari dunia Web Components, berikut referensi dari saya jika anda ingin mengenal lebih dekat dengan Web Components:<\/p>\n<p>Indonesia<\/p>\n<ul>\n<li><a href=\"https:\/\/devmuslim.id\/post\/034-web-components-dengan-satya-kresna\/?utm_campaign=crowdfire&amp;utm_content=crowdfire&amp;utm_medium=social&amp;utm_source=twitter#904897702894362625-tw%231515558989470\">Podcast Web Components bersama Developer Muslim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/satyakresna\/try-web-components\">Try Web Components<\/a><\/li>\n<\/ul>\n<p>Inggris<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/w3c\/webcomponents\">Web Components specification<\/a><\/li>\n<li><a href=\"http:\/\/webcomponents.org\/\">Web Components website<\/a><\/li>\n<li><a href=\"https:\/\/www.slideshare.net\/YevgeniyValeyev\/brief-history-of-web-components-72452483\">Brief history of Web Components<\/a><\/li>\n<li><a href=\"http:\/\/kaytcat.github.io\/web-components\/\">Web Components -Kaitlin\u00a0Rathwell<\/a><\/li>\n<li><a href=\"https:\/\/meowni.ca\/posts\/web-components-with-otters\/\">An intro to web components with\u00a0otters<\/a><\/li>\n<li><a href=\"http:\/\/infoq.com\/presentations\/modular-design-web-components\">Modular web design web components<\/a><\/li>\n<li><a href=\"https:\/\/hackernoon.com\/the-wonderful-world-of-web-components-e4c1675c6901\">Wonderful of Web Components<\/a><\/li>\n<li><a href=\"https:\/\/app.pluralsight.com\/library\/courses\/vanilla-web-components-practical-guide\/table-of-contents\">A Practical Guide to Vanilla Web Components<\/a><\/li>\n<li><a href=\"https:\/\/medium.com\/@gilfink\/why-im-betting-on-web-components-and-you-should-think-about-using-them-too-8629396e27a\">Why I\u2019m Betting on Web Components (and You Should Think About Using Them\u00a0Too)<\/a><\/li>\n<li><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/web-components\/\">Building Components<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/GoogleChromeLabs\/howto-components\">How to components<\/a><\/li>\n<\/ul>\n<p>Terima kasih kepada anda yang telah membaca artikel saya tentang web components, semoga bermanfaat. Jika ada yang ingin disampaikan berupa kritik, saran dan pertanyaan silahkan berkomentar di artikel\u00a0ini.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d23f60951dfa\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/web-components-apa-mengapa-dan-bagaimana-d23f60951dfa\">Web Components \u2014 Apa, Mengapa dan Bagaimana<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*32zCix-d6O4_4bDsCW_T3Q.png\"><figcaption>Web Components\u200a\u2014\u200aApa, Mengapa dan Bagaimana?<\/figcaption><\/figure><h3>Pendahuluan<\/h3>\n<p>Sebagai web developer, wajib hukumnya untuk up to date terhadap teknologi web mulai dari dengerin podcast, lihat forum, follow para developer dan engineer di Twitter dan baca artikel di <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> tentunya. \ud83d\ude09<\/p>\n<p>Pernahkah anda membuka sebuah website dan iseng meng-inspect elemen atau view page source dan menemukan tag HTML yang tak lazim (contoh: &lt;foo-bar&gt; atau &lt;custom-tag&gt;)? Mungkin anda akan berpikir jika tag HTML tersebut tidak tersedia <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\">di tag HTML<\/a> pada umumnya. Jika anda menemukannya, selamat anda telah menemukan sebagian kepingan dunia web modern jaman now. Perkenalkan Web Components, sebuah fitur bagi anda untuk menciptakan tag HTML milik anda\u00a0sendiri.<\/p>\n<h3>TL;DR<\/h3>\n<h4>Apa itu Web Components?<\/h4>\n<p>Secara singkat, Web Components adalah set plaform web API untuk membuat custom tag HTML yang reusable (bisa digunakan kembali) dan dienkapsulasi (child-tag dibungkus oleh parents-tag) di halaman atau aplikasi web yang kita\u00a0miliki.<\/p>\n<h4>Mengapa dia\u00a0lahir?<\/h4>\n<p>Web developer mengalami ketergantungan beragam framework dan library dalam membangun dan memelihara aplikasi. Ketergantungan yang saya maksud adalah membangun tag HTML element yang diberi CSS dan JS. Jika anda menggunakan sebuah framework seperti Bootstrap untuk membangun sebuah tag button, navs dan pagination kurang lebih sintaksnya seperti\u00a0ini:<\/p>\n<p><strong>Bootstrap button<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/1b2b4e0bcf88e187c6cbb31c9e395585\/href\">https:\/\/medium.com\/media\/1b2b4e0bcf88e187c6cbb31c9e395585\/href<\/a><p><strong>Bootstrap nav<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/c97509e79c9fa8f191c690a1cc6b4154\/href\">https:\/\/medium.com\/media\/c97509e79c9fa8f191c690a1cc6b4154\/href<\/a><p><strong>Bootstrap pagination<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/ecc0193e2cf23c7035f3a03e7d5b362e\/href\">https:\/\/medium.com\/media\/ecc0193e2cf23c7035f3a03e7d5b362e\/href<\/a><p>Jika menggunakan Web Components, anda dapat mendefinisikan nya dengan tag\u200a\u2014\u200atag di atas seperti source code di\u00a0bawah.<\/p>\n<p><strong>Custom button<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/82db86a5487ddefedf1844ff54f7b154\/href\">https:\/\/medium.com\/media\/82db86a5487ddefedf1844ff54f7b154\/href<\/a><p><strong>Custom nav<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/92d50207712cb407b6a0dcc59bb6956f\/href\">https:\/\/medium.com\/media\/92d50207712cb407b6a0dcc59bb6956f\/href<\/a><p><strong>Custom pagination<\/strong><\/p>\n<a href=\"https:\/\/medium.com\/media\/266a251190299e0f7ff792945ae9883a\/href\">https:\/\/medium.com\/media\/266a251190299e0f7ff792945ae9883a\/href<\/a><p>Bagaimana? Tidak ada \u201cdiv\u201d dan anda menciptakan tag html buatan anda. Masih ingat dengan pasal mutlak \u201cProgrammer itu pemalas\u201d? \u2764\ufe0f Web Components.<\/p>\n<p>Web components lahir dari konsep desain yg modular (standar) dengan tujuan memudahkan para developer untuk menciptakan komponen atau elemen web yg dapat diperpanjang (extensible), digunakan kembali (reusable), mudah dipelihara (maintainable). Selain itu dengan dapat memudahkan kita melakukan pemisahan konsentrasi terhadap komponen kita (separation of concern) mulai dari scoping style CSS hingga DOM di JavaScript.<\/p>\n<h4>Bagaimana proses lahirnya Web Components?<\/h4>\n<p>Semula, istilah \u201cweb components\u201d digunakan oleh Microsoft untuk menggambarkan add-ons mereka ke Office. Kemudian Sun, sekarang yang dikenal sebagai Oracle, digunakan untuk menggambarkan Java servlets. Kata \u201ccomponent\u201d juga bukanlah hal yang baru ketika membahas CBSE (Component Based Software Engineering), yang didasarkan pada pendekatan pengembangan sistem perangkat lunak dengan memilih komponen yang sudah ada dan kemudian merakitnya menggunakan arsitektur perangkat lunak yang terdefinisi dengan baik. Sejak awal tahun 2011 dan juga sekarang, istilah \u201cWeb Components\u201d telah digunakan merujuk pada standar W3C yang\u00a0baru.<\/p>\n<p>Pengembangan \u201cWeb Components\u201d yang modern dapat ditelusuri kembali di tahun 2005, dengan dimulainya revolusi \u201cAJAX\u201d dan server side framework RAD (Rapid Application Development) seperti Ruby on Rails, CakePHP dan Django. Teknologi ini membantu pengembangan front-end dengan memberikan konten secara asynchronous sambil mempertahankan kinerja dan memungkinkan situs web dibangun dalam beberapa minggu daripada beberapa bulan. Selain itu, pada tahun 2005, toolkit DOJO diluncurkan, memungkinkan pengembang menambahkan widget ke situs web mereka hanya dengan beberapa baris kode. Hal ini semakin menggarisbawahi keuntungan pembuatan modul yang dapat digunakan kembali (reusable modules).<\/p>\n<p>Pada tahun 2006, library JavaScript, jQuery dirilis. Library ini memungkinkan developer untuk menulis program JavaScript memanfaatkan API yang disederhanakan untuk interaksi DOM di berbagai macam web browser. Ini membantu memulai era \u201csingle page apps\u201d. Mendampingi kesuksesan jQuery, banyak sekali library front-end, toolkit dan framework lainnya termasuk YUI, Prototype dan Extjs\u200a\u2014\u200amasing-masing berisi stok widget library mereka sendiri. Sekitar tahun 2010 terlihat kemajuan besar dalam pengembangan sisi klien dan popularitas aplikasi satu halaman, yang mengarah ke implementasi sisi klien dari pola MV* (Model View Whatever). Di sini, pentingnya komponen UI yang dapat digunakan kembali dan dienkapsulasi menjadi semakin relevan karena kode yang menggelembung dalam single web apps berskala besar dan front-end framework.<\/p>\n<p>Saat ini library, toolkit dan framework semua tampaknya memiliki keterbatasan besar\u200a\u2014\u200akeduanya tidak berinteraksi dengan baik, developer juga tidak bisa dengan mudah mencampur dan mencocokkan komponen dari framework atau library yang berbeda. Keterbatasan utama lainnya saat bekerja dengan komponen berbasis library adalah platform browser itu\u00a0sendiri.<\/p>\n<blockquote>Jika vendor browser berhasil membangun kemampuan untuk mengenkapsulasi, mengemas, dan menggunakan kembali kode HTML dan DOM API sebelum revolusi AJAX, perkembangan web modern mungkin akan sangat berbeda hari ini. Inilah yang ditawarkan oleh Web Components\u200a\u2014\u200adukungan native browser untuk memperluas, mengemas, mengenkapsulasi, dan mengimpor UI.<\/blockquote>\n<p>Google telah menjadi advokat terdepan untuk Web Components sejak draf W3C pertama di bulan Mei 2012, yang dipimpin oleh dua Googler yakni <a href=\"https:\/\/github.com\/dglazkov\">Dimitri Glazkov<\/a> dan <a href=\"https:\/\/twitter.com\/hayatoito\">Hayato Ito<\/a>. Investasi Google dalam Web Components terbukti pada tahun 2013 Google I\/O di mana mereka mengumumkan Polymer, library ciptaan mereka untuk membangun komponen. Sejak itu, banyak sumber daya website seperti <a href=\"http:\/\/webcomponents.org\/\">webcomponents.org<\/a> dan customelements.io dan framework seperti <a href=\"https:\/\/x-tag.github.io\/\">X-tag<\/a> dan <a href=\"http:\/\/bosonic.github.io\/\">Bosonic<\/a>, memungkinkan penerapan komponen web secara modern dengan dukungan browser yang lebih\u00a0baik.<\/p>\n<h4>Apa spesifikasi dari web components?<\/h4>\n<p>Web Components memiliki empat spesifikasi meliputi:<\/p>\n<p><strong>A. Custom Elements<\/strong><br> Salah satu yang bisa saya katakan menonjol dari Web Components adalah Custom Elements. Ia adalah sebuah spesifikasi atau syarat yang memperbolehkan developer untuk membuat tag HTML baru, mengextend tag HTML yang sudah ada atau mengextend komponen yang telah dibuat oleh developer lain. Custom Elements menyediakan sebuah jalan secara native untuk membuat komponen yang dapat digunakan kembali (re-usable components). Spesifikasi ini harus didefinisikan dalam JavaScript dan memiliki beberapa siklus kehidupan (lifecycle) seperti kode di\u00a0bawah.<\/p>\n<a href=\"https:\/\/medium.com\/media\/05662f889940955e1c4d4cc3fdb2149e\/href\">https:\/\/medium.com\/media\/05662f889940955e1c4d4cc3fdb2149e\/href<\/a><p>Jika anda ingin menambahkan DOM ke dalam elemen dapat dilakukan dengan menambahkan markup ke dalam<br> this.innerHTML:<\/p>\n<a href=\"https:\/\/medium.com\/media\/745f3a1eaea92cab75ad9923167f93a3\/href\">https:\/\/medium.com\/media\/745f3a1eaea92cab75ad9923167f93a3\/href<\/a><p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Nama harus terdiri dari minimal dua kata dan berisi tanda strip (-) untuk memisahkan setiap kata (contoh: &lt;foo-bar&gt;). Kita sebut ini dengan istilah <strong><em>kebab-case.<\/em><\/strong>\n<\/li>\n<li>Nama harus\u00a0unik.<\/li>\n<li>Custom Elements harus disertai dengan closing tag (contoh: &lt;foo-bar&gt;&lt;\/foo-bar&gt;) dan tidak bisa melakukan self closing tag (contoh: &lt;foo-bar&gt; tidak\u00a0bisa).<\/li>\n<li>Berdasarkan spesifikasi custom elements, kita bisa meng-extend tag HTML element native yang sudah ada (contoh: HTMLButtonElement). Jika anda melakukannya maka, elemen kustom yang kita buat akan mewarisi langsung semua fungsionalitas yang ada di HTMLButtonElement. Sayangnya, hal ini belum diimplementasikan di browser manapun.\u00a0\ud83d\ude2d<\/li>\n<li>HTML template adalah tempat yang ideal untuk markup (shadow) DOM sebuah custom elements.<\/li>\n<li>Selalu tambahkan method getter dan setter untuk semua dan setiap jenis atribut yang anda\u00a0gunakan.<\/li>\n<\/ul>\n<p><strong>HTML Templates<\/strong><br> HTML templates adalah spesifikasi atau syarat yang memberikan memperbolehkan developer untuk mendeklarasikan fragment (potongan) markup yang mana diurai sebagai HTML, tidak dipakai saat loading halaman, tetapi dapat diinstansiasi nanti saat dijalankan (runtime).<\/p>\n<p>Membuat template semudah seperti membuat elemen DOM pada\u00a0umumnya.<\/p>\n<a href=\"https:\/\/medium.com\/media\/4c519415c4a0579ea39c3cb44a87fbad\/href\">https:\/\/medium.com\/media\/4c519415c4a0579ea39c3cb44a87fbad\/href<\/a><p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Isi dari template tidak aktif sampai diaktifkan.<\/li>\n<li>Tidak ada efek samping sampai template digunakan.<\/li>\n<li>Konten dianggap tidak berada di\u00a0DOM.<\/li>\n<li>Template dapat ditempatkan di\u00a0manapun.<\/li>\n<li>Tidak ada bentuk native data-binding. Jadi, anda masih memerlukan sebuah library untuk mengatasinya atau menulis beberapa logika bisnis sendiri untuk benar-benar mengisi template dengan konten yang bermanfaat.<\/li>\n<\/ul>\n<p><strong>Shadow DOM<\/strong><br> Shadow DOM hanyalah sebuah DOM yang normal dengan dua perbedaan: 1) bagaimana dia dibuat\/digunakan dan 2) bagaimana berperilaku dalam kaitannya dengan sisa halaman. Biasanya, anda membuat sebuah DOM nodes dan menambahkan mereka sebagai anak di elemen lain. Dengan shadow DOM, anda dapat membuat sebuah ruang lingkup (scoped) DOM tree yang disisipkan ke dalam sebuah elemen, tetapi terpisah dari anak yang sebenarnya. Ruang lingkup subtree ini disebut dengan shadow tree. Elemen yang disisipkan disebut dengan shadow host. Semua yang anda tambahkan ke dalam shadow menjadi lokal ke elemen yang dihost, termasuk &lt;style&gt;. Seperti inilah bagaimana shadow DOM mencapai ruang lingkup style\u00a0CSS.<\/p>\n<p>Anda mungkin telah menggunakan shadow DOM sebelumnya, bahkan ketika anda tidak menyadarinya. Browser menggunakan shadow DOM untuk beragam elemen HTML native seperti range\u00a0input:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*X5W3o9aHl1KRd3y-hVYvRw.png\"><figcaption>shadow-root user agent pada input type=\u201drange\u201d<\/figcaption><\/figure><p>Anda belum bisa melihat shadow-root (user-agent) pada elemen HTML native. Yang perlu anda lakukan adalah klik kanan inspect element &gt; pilih opsi Settings &gt; pilih sesi Elements &gt; centang Show user agent shadow DOM. Jika anda mengalami kesulitan, anda bisa melihatnya di <a href=\"https:\/\/www.youtube.com\/watch?v=7gDvFlvoZKQ\">video\u00a0ini<\/a>.<\/p>\n<blockquote>Jika anda membuat style CSS dengan id=\"track\" atau id=\"thumb\" apakah akan berpengaruh terhadap shadow root di input type=\"range\"?<\/blockquote>\n<p>API shadow DOM mengijinkan developer untuk membuat dan menyisipkan shadow DOM ke dalam elemen, yang mana sangat bagus jika digabungkan dengan Custom Elements.<\/p>\n<p>Hal\u200a\u2014\u200ahal yang harus diperhatikan:<\/p>\n<ul>\n<li>Style yang menggunakan shadow DOM hanya akan berpengaruh pada ruang lingkup (scoped) elemen itu\u00a0saja.<\/li>\n<li>Gunakan\u00a0:host selector untuk style parent container.<\/li>\n<li>position: fixed and posisi CSS lainnya digunakan untuk membatasi komponen sebagai \"viewport\".<\/li>\n<li>Style CSS dari elemen di dalam shadow-root dapat ditimpa dari light-dom (\u201cregular\u201d \/ \u201cparent\u201d\u00a0-dom).<\/li>\n<\/ul>\n<p><strong>HTML Imports<\/strong><br> Biasanya kita dapat mengimpor aset seperti CSS dengan tag &lt;link rel=\"stylesheet\"&gt; dan JavaScript dengan tag &lt;script src=\"foobar.js\"&gt; file ke dalam markup HTML. Pernahkah anda mencoba mengimpor sebuah dokumen HTML? Jika iya, maka HTML import sudah tidak asing bagi anda. Dengan HTML imports, anda dapat menyisipkan dokumen HTML. Anda bisa mengimpor satu dokumen yang isinya HTML, CSS dan JavaScript sesuai dengan kebutuhan anda.<\/p>\n<p>Mengimpor dokumen HTML sangat mirip dengan impor sebuah style\u00a0CSS:<\/p>\n<p>&lt;link rel=\"import\" href=\"foobar.html\" \/&gt;<\/p>\n<p>Dengan segera file yang dimpor akan diload, script yang disematkan akan berjalan dan kontennya dapat digunakan dengan mereferensikan properti import dari\u00a0elemen:<\/p>\n<pre>const content = document.querySelector('link[rel=\"import\"]').import;<\/pre>\n<p>API ini akan berguna ketika mengimpor custom elements\u00a0lainnya.<\/p>\n<blockquote><em>Salah satu catatan utama tentang dukungan browser terhadap HTML Import: Chrome telah menerapkan (implement) dan mengirimkannya (shipped), namun WebKit dan Firefox tidak akan menerapkannya sama sekali. WebKit menetapkan bahwa mereka ingin menyelidiki kombinasi dengan modul\u00a0ES6.<\/em><\/blockquote>\n<p>Hal\u200a\u2014\u200ahal yang perlu diperhatikan:<\/p>\n<ul>\n<li>link rel=import de-duplikat semua permintaan secara\u00a0otomatis<\/li>\n<li>Dokumen yang diimpor tidak ditempatkan di DOM manapun, hanya dibuat tersedia untuk\u00a0gunakan.<\/li>\n<li>Tag &lt;script&gt; di dalam dokumen impor akan berjalan pada HTML\u00a0import.<\/li>\n<li>Statement import dibloking secara default, tetapi menerima atribut\u00a0async.<\/li>\n<li>Ketika mengakses document dari dalam dokumen yang akan diimpor, sebenarnya anda mengakses parent document. document.currentScript.ownerDocument merujuk kepada \"child\"-document.<\/li>\n<li>HTML import yang bersarang akan mengencangkan (screw) dengan document.currentScript.ownerDocument. Untuk mencegah hal tersebut, bungkus script bersarang tersebut di dalam <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Glossary\/IIFE\">IIFE<\/a> dengan document.currentScript.ownerDocument sebagai parameter.<\/li>\n<\/ul>\n<h4>Bagaimana cara membuat vanilla web components?<\/h4>\n<p>Sejauh ini, saya menemukan dua contoh yang bagus dan baik untuk membuat vanilla web components (tanpa framework dan library). Silahkan anda membaca di link <a href=\"https:\/\/www.codementor.io\/ayushgupta\/vanilla-js-web-components-chguq8goz\">codementor.io (studi kasus user card)<\/a> dan <a href=\"https:\/\/github.com\/rijkvanzanten\/nasa-apod\">github.com milik Rijk van Zanten (studi kasus NASA Apod)<\/a>. Jika anda menemukan contoh bagus lainnya silahkan beri komentar di artikel ini.\u00a0\ud83d\ude09<\/p>\n<h4>Bagaimana status web components saat\u00a0ini?<\/h4>\n<p>Berdasarkan situs caniuse.com, status web components sebagai gambar di bawah dan saya mengaksesnya pada tanggal 12 Januari 2018. Jadi, akan ada perubahan di waktu yang tidak ditentukan.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*hXtygv3ibevNCUk0.png\"><figcaption>Dukungan Custom Elements via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*aEk18d2RyYJIVyHJ.png\"><figcaption>Dukungan shadow DOM via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*YguigXKVqAKw7c_w.png\"><figcaption>Dukungan HTML templates via\u00a0caniuse<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*ok6YtdxX_i3oKhPn.png\"><figcaption>Dukungan HTML imports via\u00a0caniuse<\/figcaption><\/figure><p>Hal\u200a\u2014\u200ahal yang perlu diperhatikan:<\/p>\n<ul>\n<li>Kita masih belum bisa mengextend elemen native HTML a.k.a. customized built-in elements (contoh: HTMLButtonElement) untuk membuat Custom Elements seperti yang dijelaskan pada gambar Custom Elements via\u00a0caniuse.<\/li>\n<li>Firefox, WebKit tidak mempertimbangkan untuk membuat spesifikasi HTML Imports di browser mereka. Info terakhir yang saya dapatkan bahwa <a href=\"https:\/\/github.com\/TakayoshiKochi\/deprecate-style-in-html-imports\">Chrome juga akan menghapus HTML Imports di browser mereka segera sekitar bulan Maret tahun 2018<\/a>. Sebagai gantinya para browser vendor akan menggantinya dengan HTML Module a.k.a. ES6\u00a0modules.<\/li>\n<li>\n<a href=\"https:\/\/twitter.com\/FirefoxNightly\/status\/951009715584225280\">Custom Elements versi 1 telah dirilis pada Firefox Nightly<\/a>.\u00a0\ud83c\udf89<\/li>\n<\/ul>\n<p><strong>Mengapa belum disupport secara menyeluruh?<\/strong><\/p>\n<p>Perlu kita ketahui bahwa pekerjaan browser vendor tidak hanya mengurusi Web Components saja. Banyak fitur lain yang harus mereka prioritaskan sesuai dengan kebijakan para browser vendor. Contoh <a href=\"https:\/\/webkit.org\/blog\/8042\/release-notes-for-safari-technology-preview-46\/\">Safari<\/a> dan <a href=\"https:\/\/twitter.com\/MSEdgeDev\/status\/943181166554705920\">Ms. Edge<\/a> meluncurkan Service Worker secara default di browser Tech Preview di bulan Desember 2017. Kemudian, kali ini Safari sedang mengembangkan web manifest, salah satu syarat untuk PWA berdasarkan <a href=\"https:\/\/twitter.com\/firt\/status\/951216290991104000\">tweet Maximiliano Firtman<\/a>. Lalu bagaimana solusi agar bisa disupport secara menyeluruh? Web Components telah menyediakan sebuah <a href=\"https:\/\/www.webcomponents.org\/polyfills\/\">polyfills<\/a> untuk menanggulangi hal tersebut. Menurut perspektif saya, polyfill bersifat sementara hingga semua browser vendor mendukung Web Components dan para pengguna tidak menggunakan Internet Explorer seperti gambar yang saya dapatkan di situs <a href=\"https:\/\/www.w3schools.com\/browsers\/\">w3schools.com (Browser Statistics)<\/a>.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/0*UbkH1Y-JZ-yV6PUK.png\"><figcaption>browser statistics via w3schools<\/figcaption><\/figure><p><strong>Apa yang harus saya lakukan selanjutnya?<\/strong><\/p>\n<p>Artikel ini hanyalah sebagian kecil dari dunia Web Components, berikut referensi dari saya jika anda ingin mengenal lebih dekat dengan Web Components:<\/p>\n<p>Indonesia<\/p>\n<ul>\n<li><a href=\"https:\/\/devmuslim.id\/post\/034-web-components-dengan-satya-kresna\/?utm_campaign=crowdfire&amp;utm_content=crowdfire&amp;utm_medium=social&amp;utm_source=twitter#904897702894362625-tw%231515558989470\">Podcast Web Components bersama Developer Muslim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/satyakresna\/try-web-components\">Try Web Components<\/a><\/li>\n<\/ul>\n<p>Inggris<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/w3c\/webcomponents\">Web Components specification<\/a><\/li>\n<li><a href=\"http:\/\/webcomponents.org\/\">Web Components website<\/a><\/li>\n<li><a href=\"https:\/\/www.slideshare.net\/YevgeniyValeyev\/brief-history-of-web-components-72452483\">Brief history of Web Components<\/a><\/li>\n<li><a href=\"http:\/\/kaytcat.github.io\/web-components\/\">Web Components -Kaitlin\u00a0Rathwell<\/a><\/li>\n<li><a href=\"https:\/\/meowni.ca\/posts\/web-components-with-otters\/\">An intro to web components with\u00a0otters<\/a><\/li>\n<li><a href=\"http:\/\/infoq.com\/presentations\/modular-design-web-components\">Modular web design web components<\/a><\/li>\n<li><a href=\"https:\/\/hackernoon.com\/the-wonderful-world-of-web-components-e4c1675c6901\">Wonderful of Web Components<\/a><\/li>\n<li><a href=\"https:\/\/app.pluralsight.com\/library\/courses\/vanilla-web-components-practical-guide\/table-of-contents\">A Practical Guide to Vanilla Web Components<\/a><\/li>\n<li><a href=\"https:\/\/medium.com\/@gilfink\/why-im-betting-on-web-components-and-you-should-think-about-using-them-too-8629396e27a\">Why I\u2019m Betting on Web Components (and You Should Think About Using Them\u00a0Too)<\/a><\/li>\n<li><a href=\"https:\/\/developers.google.com\/web\/fundamentals\/web-components\/\">Building Components<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/GoogleChromeLabs\/howto-components\">How to components<\/a><\/li>\n<\/ul>\n<p>Terima kasih kepada anda yang telah membaca artikel saya tentang web components, semoga bermanfaat. Jika ada yang ingin disampaikan berupa kritik, saran dan pertanyaan silahkan berkomentar di artikel\u00a0ini.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d23f60951dfa\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/web-components-apa-mengapa-dan-bagaimana-d23f60951dfa\">Web Components \u2014 Apa, Mengapa dan Bagaimana<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["shadow-dom","html-templates","web","web-components","custom-elements"]},{"title":"Perkenalan Accessibility","pubDate":"2017-10-31 00:11:45","link":"https:\/\/medium.com\/wwwid\/perkenalan-accessibility-c9d893318567?source=rss----c432d91819e0---4","guid":"https:\/\/medium.com\/p\/c9d893318567","author":"Satya Kresna Adi Pratama","thumbnail":"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*PVDzAB9rzVptGxSOXN8pVg.png","description":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*PVDzAB9rzVptGxSOXN8pVg.png\"><\/figure><p>Sebagai seorang web developer, selain urusan performance dan interface pada website yang dibuat, kita perlu memperhatikan siapa user kita. Apakah user kita lahir tidak ada kekurangan fisik atau sebaliknya (disabilitas). Jika user yang mengakses website kita adalah kalangan disabiilitas maka kita perlu memberikan perhatian ekstra terhadap website kita. Lalu bagaimana caranya? Accessibility adalah jawaban dari hal tersebut.<\/p>\n<h3><strong>Definisi<\/strong><\/h3>\n<p>Accessibility secara garis besar adalah bagaimana user yang disabilitas bisa mengakses aplikasi kita layaknya orang normal (<em>making disability users able to access our website<\/em>). Accessibility sering disingkat dengan a11y layaknya localization (l10n) dan intenationalization (i18n). Dengan bantuan teknologi pembantu (assitive technology) seperti screen reader dan mengubah website kita ke arah a11y maka orang disabilitas bisa mengakses website kita layaknya orang\u00a0normal.<\/p>\n<blockquote>Perlu dipahami bahwa a11y bukanlah sebuah fitur tetapi sebuah kebutuhan bahkan keharusan (It\u2019s not a feature but a requirement even\u00a0must)<\/blockquote>\n<h3><strong>Tools untuk Accessibility<\/strong><\/h3>\n<p>Saya akan menggunakan Lighthouse yang ada pada Chrome browser untuk menganalisa apakah website kita sudah bisa dikatakan Accessibility. Kita akan bahas dipertemuan selanjutnya.<\/p>\n<h3><strong>Panduan mempelajari Accessibility<\/strong><\/h3>\n<p>1. <a href=\"https:\/\/webaim.org\/standards\/wcag\/checklist\">WebAIM WCAG 2.0 Checklist<\/a>.<\/p>\n<p>2. <a href=\"https:\/\/www.w3.org\/WAI\/WCAG20\/quickref\/\">Web Content Accessibility Guidelines<\/a>.<\/p>\n<p>3. <a href=\"https:\/\/classroom.udacity.com\/courses\/ud891\">Udacity\u200a\u2014\u200aWeb Accessibility<\/a>.<\/p>\n<h3><strong>Kriteria Accessibility<\/strong><\/h3>\n<p>1. <strong>Perceivable<\/strong> (Konten website tersedia bagi indera\u200a\u2014\u200apenglihatan, pendengaran dan atau sentuhan).<\/p>\n<p>2. <strong>Operable<\/strong> (Tampilan form, kendali dan navigasi dapat dioperasikan).<\/p>\n<p>3. <strong>Understandable<\/strong> (Konten dan tampilan dapat dimengerti).<\/p>\n<p>4. <strong>Robust<\/strong> (Konten dapat digunakan dengan baik oleh berbagai platform termasuk teknologi bantu).<\/p>\n<p>Kita sebut dengan\u00a0<em>POUR<\/em><\/p>\n<h3><strong>Alasan membuat konten Accessibility dalam bahasa Indonesia<\/strong><\/h3>\n<p>1. Merupakan kesempatan bagi saya untuk memperkenalkan konten Accessibility dalam bahasa Indonesia. <em>Sejauh yang saya lihat di forum komunitas web developer belum ada yang membahas tentang hal ini apalagi dalam konten bahasa Indonesia.<\/em> Masih ada beberapa orang yang belum bisa mencerna sebuah materi dengan baik dengan bahasa Inggris maka dari itulah saya membuatkan artikel Accessibility dalam bahasa Indonesia.<\/p>\n<p>2. Menurut sudut pandang saya rata-rata web developer jauh lebih mempentingkan performance website dibandingkan Accessibility. Tetapi, perlu dipahami bahwa kita harus tahu siapa user kita. Apakah mereka lahir tanpa cacat fisik atau sebaliknya (disabilitas). Sehingga Accessibility wajib ada disetiap website. <strong>Accessibility adalah prioritas utama anda jika anda ingin mencapai <\/strong><a href=\"https:\/\/developers.google.com\/web\/billions\/\"><strong>billion users on the\u00a0web<\/strong><\/a><strong>.<\/strong><\/p>\n<p>Di bagian selanjutnya saya akan menjelaskan implementasi Accessibility di dunia\u00a0web.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9d893318567\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/perkenalan-accessibility-c9d893318567\">Perkenalan Accessibility<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","content":"\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*PVDzAB9rzVptGxSOXN8pVg.png\"><\/figure><p>Sebagai seorang web developer, selain urusan performance dan interface pada website yang dibuat, kita perlu memperhatikan siapa user kita. Apakah user kita lahir tidak ada kekurangan fisik atau sebaliknya (disabilitas). Jika user yang mengakses website kita adalah kalangan disabiilitas maka kita perlu memberikan perhatian ekstra terhadap website kita. Lalu bagaimana caranya? Accessibility adalah jawaban dari hal tersebut.<\/p>\n<h3><strong>Definisi<\/strong><\/h3>\n<p>Accessibility secara garis besar adalah bagaimana user yang disabilitas bisa mengakses aplikasi kita layaknya orang normal (<em>making disability users able to access our website<\/em>). Accessibility sering disingkat dengan a11y layaknya localization (l10n) dan intenationalization (i18n). Dengan bantuan teknologi pembantu (assitive technology) seperti screen reader dan mengubah website kita ke arah a11y maka orang disabilitas bisa mengakses website kita layaknya orang\u00a0normal.<\/p>\n<blockquote>Perlu dipahami bahwa a11y bukanlah sebuah fitur tetapi sebuah kebutuhan bahkan keharusan (It\u2019s not a feature but a requirement even\u00a0must)<\/blockquote>\n<h3><strong>Tools untuk Accessibility<\/strong><\/h3>\n<p>Saya akan menggunakan Lighthouse yang ada pada Chrome browser untuk menganalisa apakah website kita sudah bisa dikatakan Accessibility. Kita akan bahas dipertemuan selanjutnya.<\/p>\n<h3><strong>Panduan mempelajari Accessibility<\/strong><\/h3>\n<p>1. <a href=\"https:\/\/webaim.org\/standards\/wcag\/checklist\">WebAIM WCAG 2.0 Checklist<\/a>.<\/p>\n<p>2. <a href=\"https:\/\/www.w3.org\/WAI\/WCAG20\/quickref\/\">Web Content Accessibility Guidelines<\/a>.<\/p>\n<p>3. <a href=\"https:\/\/classroom.udacity.com\/courses\/ud891\">Udacity\u200a\u2014\u200aWeb Accessibility<\/a>.<\/p>\n<h3><strong>Kriteria Accessibility<\/strong><\/h3>\n<p>1. <strong>Perceivable<\/strong> (Konten website tersedia bagi indera\u200a\u2014\u200apenglihatan, pendengaran dan atau sentuhan).<\/p>\n<p>2. <strong>Operable<\/strong> (Tampilan form, kendali dan navigasi dapat dioperasikan).<\/p>\n<p>3. <strong>Understandable<\/strong> (Konten dan tampilan dapat dimengerti).<\/p>\n<p>4. <strong>Robust<\/strong> (Konten dapat digunakan dengan baik oleh berbagai platform termasuk teknologi bantu).<\/p>\n<p>Kita sebut dengan\u00a0<em>POUR<\/em><\/p>\n<h3><strong>Alasan membuat konten Accessibility dalam bahasa Indonesia<\/strong><\/h3>\n<p>1. Merupakan kesempatan bagi saya untuk memperkenalkan konten Accessibility dalam bahasa Indonesia. <em>Sejauh yang saya lihat di forum komunitas web developer belum ada yang membahas tentang hal ini apalagi dalam konten bahasa Indonesia.<\/em> Masih ada beberapa orang yang belum bisa mencerna sebuah materi dengan baik dengan bahasa Inggris maka dari itulah saya membuatkan artikel Accessibility dalam bahasa Indonesia.<\/p>\n<p>2. Menurut sudut pandang saya rata-rata web developer jauh lebih mempentingkan performance website dibandingkan Accessibility. Tetapi, perlu dipahami bahwa kita harus tahu siapa user kita. Apakah mereka lahir tanpa cacat fisik atau sebaliknya (disabilitas). Sehingga Accessibility wajib ada disetiap website. <strong>Accessibility adalah prioritas utama anda jika anda ingin mencapai <\/strong><a href=\"https:\/\/developers.google.com\/web\/billions\/\"><strong>billion users on the\u00a0web<\/strong><\/a><strong>.<\/strong><\/p>\n<p>Di bagian selanjutnya saya akan menjelaskan implementasi Accessibility di dunia\u00a0web.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c9d893318567\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/medium.com\/wwwid\/perkenalan-accessibility-c9d893318567\">Perkenalan Accessibility<\/a> was originally published in <a href=\"https:\/\/medium.com\/wwwid\">WWWID<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n","enclosure":{},"categories":["accessibility","wcag","people-with-disabilities","billion-users-on-the-web","web-accessibilty"]}]}